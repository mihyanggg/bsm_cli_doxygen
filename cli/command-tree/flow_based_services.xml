<?xml version='1.0' encoding='UTF-8'?>
<!-- Copyright 2019 Broadcom. The term Broadcom refers to Broadcom Inc. and/or its subsidiaries.  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. -->
<!DOCTYPE CLISH_MODULE [
<!ENTITY START_PORT_ID "1">
<!ENTITY MAX_PORT_ID "32">
<!ENTITY START_SUB_PORT_ID "1">
<!ENTITY MAX_SUB_PORT_ID "4">
<!ENTITY MAX_MTU "9216">
<!ENTITY UINT_32_RANGE "([1-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-5])">
]>
<CLISH_MODULE xmlns="http://www.dellemc.com/sonic/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xi="http://www.w3.org/2001/XInclude" xsi:schemaLocation="https://raw.githubusercontent.com/project-arlo/sonic-mgmt-framework/master/src/CLI/clitree/scripts/sonic-clish.xsd">
  <!--================================= PTYPES =================================-->
  <PTYPE name="FLOW_PRIORITY" method="integer" pattern="0..4095" help=""/>
  <PTYPE name="POLICER_RATE_BITS" pattern="^((&UINT_32_RANGE;)([kmgt]?bps)?)$" help=""/>
  <PTYPE name="POLICER_RATE_BYTES" pattern="^((&UINT_32_RANGE;)([KMGT]?B)?)$" help=""/>
  <PTYPE name="DESCRIPTION" pattern=".{1,256}" help="String (Max: 256 characters)"/>
  <PTYPE name="TRAP_QUEUE" method="integer" pattern="0..31" help=""/>
  <!--============================== EXEC MODE COMMANDS =======================-->
  <VIEW name="enable-view">
    <!-- show policy-map [NAME] | [type qos|monitoring|forwarding|copp|acl-copp] -->
    <COMMAND name="show policy-map" help="Shows policy-map information">
      <PARAM name="show-fbs-policy-name-or-type" help="" ptype="SUBCOMMAND" mode="switch" optional="true">
        <PARAM name="show-fbs-policy-name" help="Shows policy-map information using name (Max: 63 characters)" ptype="STRING_63"/>
        <PARAM name="type" help="Shows all policy-maps using the policy-map type" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <PARAM name="show-fbs-policy-type" help="" ptype="SUBCOMMAND" mode="switch" test="&quot;${show-fbs-policy-name}&quot; = &quot;type&quot;">
        <PARAM name="qos" help="Show all QoS policy-maps" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="monitoring" help="Show all monitoring policy-maps" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="forwarding" help="Show all forwarding policy-maps" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="copp" help="Show all CoPP policy-maps" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="acl-copp" help="Show all ACL based CoPP policy-maps" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs show_policy ${show-fbs-policy-name} ${show-fbs-policy-type}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                   Shows flow based services policy-map related information 
               </DESCRIPTION>
        <USAGE>
                   Policy-map type and policy-map name arguments are optional. If type argument or policy-map name not provided command will show all policy-map information.
                   Else it show corresponding policy-map information of given type or given name
               </USAGE>
        <EXAMPLE summary="Displays policy-map information">
                Policy policy_mirror Type monitoring
                  Description:
                  Flow class1 at priority 10
                    Description:
                    set mirror-session mirror1
                  Applied to:
                    Vlan100 at Ingress
 
                Policy policy_qos Type qos
                  Description:
                  Flow class_permit_ipv6 at priority 10
                    Description:
                    police cir 300000000 cbs 300000000 pir 300000000 pbs 300000000
                  Flow class_permit_ip at priority 10
                    Description:
                    police cir 300000000 cbs 300000000 pir 300000000 pbs 300000000
                  Applied to:
                    Vlan100 at Egress
 
                Policy policy_vrf Type forwarding
                  Description:
                  Flow class_permit_ipv6 at priority 10
                    Description:
                    set ipv6 nexthop 1211::2 priority 20
                    set ipv6 nexthop 1212::2 vrf Vrf-BLUE priority 30
                  Flow class_permit_ip at priority 10
                    Description:
                    set ip nexthop 12.12.1.2 vrf default priority 30
                    set ip nexthop 12.12.2.2 vrf Vrf-BLUE priority 20
                    set ip nexthop 12.12.1.2 priority 10
                  Applied to:
                    Vlan100 at Ingress
                    Switch at Ingress
               </EXAMPLE>
      </DOCGEN>
      <xi:include href="include/pipe.xml"/>
    </COMMAND>
    <!-- show class-map [NAME] [type acl|fields] -->
    <COMMAND name="show class-map" help="Shows class-map information">
      <PARAM name="show-fbs-class-name-or-type" help="" ptype="SUBCOMMAND" mode="switch" optional="true">
        <PARAM name="show-fbs-class-name" help="Name of the class-map" ptype="STRING_63"/>
        <PARAM name="match-type" help="Shows all class-maps using the match type" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <PARAM name="show-fbs-class-type" help="" ptype="SUBCOMMAND" mode="switch" test="&quot;${show-fbs-class-name}&quot; = &quot;match-type&quot;">
        <PARAM name="acl" help="Shows class-maps which use ACL as match criteria" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="fields" help="Shows class-maps which use L2-L4 header fields as match criteria" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="copp" help="Shows class-maps which use CoPP as match criteria" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs show_classifier ${show-fbs-class-name} ${show-fbs-class-type}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                   Shows flow based services class-map related information 
               </DESCRIPTION>
        <USAGE>
                   Class-map match type and class-map name arguments are optional. If match type argument or class-map name not provided command will show all cclass-map information. Else it show corresponding class-map information of given type or given name
               </USAGE>
        <EXAMPLE summary="Displays class-map information">
                sonic# show class-map class_permit_ip
                Class-map class_permit_ip match-type fields
                  Description:
                  Match:
                  Referenced in flows:
                    policy policy_qos at priority 10
                    policy policy_vrf at priority 10
               </EXAMPLE>
      </DOCGEN>
      <xi:include href="include/pipe.xml"/>
    </COMMAND>
    <!-- show service-policy summary [interface NAME] | [type qos|monitoring|forwarding] -->
    <COMMAND name="show service-policy summary" help="Shows summary of all applied polices">
      <PARAM name="interface-type-options" help="Shows policies applied for interface" ptype="SUBCOMMAND" mode="switch" optional="true" order="true">
        <PARAM name="interface" help="Shows policies applied for interface" mode="subcommand" ptype="SUBCOMMAND">
          <PARAM name="interface-options" help="Show policies applied for interface" ptype="SUBCOMMAND" mode="switch">
            <PARAM name="eth-if-id" help="Ethernet interface" ptype="PHY_INTERFACE"/>
            <PARAM name="po-if-id" help="PortChannel interface" ptype="PO_INTERFACE"/>
            <PARAM name="vlan-if-id" help="Vlan interface" ptype="VLAN_INTERFACE"/>
            <PARAM name="eth-sub-if-id" help="Ethernet sub-interface" ptype="PHY_INTERFACE_SUBIF"/>
            <PARAM name="po-sub-if-id" help="PortChannel sub-interface" ptype="PO_INTERFACE_SUBIF"/>
            <PARAM name="CPU" help="CPU interface" ptype="SUBCOMMAND" mode="subcommand"/>
          </PARAM>
        </PARAM>
        <PARAM name="Switch" help="Switch/Global interface" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="CtrlPlane" help="Out of band interface" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <PARAM name="type" help="Policy type" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true">
        <PARAM name="fbs-policy-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
          <PARAM name="qos" help="QoS Policy" ptype="SUBCOMMAND" mode="subcommand" test="( &quot;0&quot;=&quot;0&quot; ) -o ( &quot;0&quot;=&quot;1&quot; ) -o ( &quot;0&quot;=&quot;2&quot; )"/>
          <PARAM name="monitoring" help="Monitoring Policy" ptype="SUBCOMMAND" mode="subcommand" test="( &quot;0&quot;=&quot;0&quot; ) -o ( &quot;0&quot;=&quot;1&quot; )"/>
          <PARAM name="forwarding" help="Forwarding Policy" ptype="SUBCOMMAND" mode="subcommand" test="( &quot;0&quot;=&quot;0&quot; ) -o ( &quot;0&quot;=&quot;1&quot; )"/>
          <PARAM name="copp" help="CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="( &quot;0&quot;=&quot;0&quot; )"/>
          <PARAM name="acl-copp" help="ACL CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="( &quot;0&quot;=&quot;0&quot; ) -o ( &quot;0&quot;=&quot;3&quot; )"/>
        </PARAM>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs show_policy_summary ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                   Shows summary of applied flow based services policies 
               </DESCRIPTION>
        <USAGE>
                   Interface argument is optional. If interface is not specified it shows all service applied interfaces and their policy information. If interface is specified it shows service applied policy information for given interface.If interface is Switch it shows global/Switch level service policies.
               </USAGE>
        <EXAMPLE summary="Displays summary of applied flow based service policies">
               sonic# show service-policy summary 
               Vlan100                            
                   monitoring policy policy_mirror at ingress
                   forwarding policy policy_vrf at ingress   
                   qos policy policy_qos at egress
               Switch
                   forwarding policy policy_vrf at ingress
               CtrlPlane
                   qos policy oob-qos-policy at ingress
               </EXAMPLE>
      </DOCGEN>
      <xi:include href="include/pipe.xml"/>
    </COMMAND>
    <!-- show service-policy policy NAME [interface NAME] -->
    <COMMAND name="show service-policy policy-map" help="Shows details by policy-map name">
      <PARAM name="fbs-policy-name" help="Policy-map name (Max: 63 characters)" ptype="STRING_63"/>
      <PARAM name="interface-type-options" help="Shows policy-maps applied to interface(s)" ptype="SUBCOMMAND" mode="switch" optional="true" order="true">
        <PARAM name="interface" help="Shows policy-maps applied to interface" mode="subcommand" ptype="SUBCOMMAND">
          <PARAM name="interface-options" help="Show policies applied for interface" ptype="SUBCOMMAND" mode="switch">
            <PARAM name="eth-if-id" help="Ethernet interface" ptype="PHY_INTERFACE"/>
            <PARAM name="po-if-id" help="PortChannel interface" ptype="PO_INTERFACE"/>
            <PARAM name="vlan-if-id" help="Vlan interface" ptype="VLAN_INTERFACE"/>
            <PARAM name="eth-sub-if-id" help="Ethernet sub-interface" ptype="PHY_INTERFACE_SUBIF"/>
            <PARAM name="po-sub-if-id" help="PortChannel sub-interface" ptype="PO_INTERFACE_SUBIF"/>
            <PARAM name="CPU" help="CPU interface" ptype="SUBCOMMAND" mode="subcommand"/>
          </PARAM>
        </PARAM>
        <PARAM name="Switch" help="Switch/Global interface" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="CtrlPlane" help="Out of band interface" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs show_details_by_policy ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                   Shows flow based services applied policies information by policy name
               </DESCRIPTION>
        <USAGE>
                   policy-map interface argument is optional. If interface is not specified then it shows all services applied interfaces information for given policy. If interface is also specified then it gives service applied information for given policy name and given interface 
               </USAGE>
        <EXAMPLE summary="Displays fbs service applied for given policy policy_vrf">
               show service-policy policy-map policy_vrf
               Vlan100
                 Policy policy_vrf type forwarding at ingress
                 Description:
                   Flow class_permit_ipv6 at priority 10 (Inactive)
                     Description:
                     set ipv6 nexthop 1211::2 priority 20
                     set ipv6 nexthop 1212::2 vrf Vrf-BLUE priority 30
                     Packet matches: 0 frames 0 bytes
                   Flow class_permit_ip at priority 10 (Inactive)
                     Description:
                     set ip nexthop 12.12.1.2 vrf default priority 30
                     set ip nexthop 12.12.2.2 vrf Vrf-BLUE priority 20
                     set ip nexthop 12.12.1.2 priority 10
                     Packet matches: 0 frames 0 bytes
               Switch
                 Policy policy_vrf type forwarding at ingress
                 Description:
                   Flow class_permit_ipv6 at priority 10 (Inactive)
                     Description:
                     set ipv6 nexthop 1211::2 priority 20
                     set ipv6 nexthop 1212::2 vrf Vrf-BLUE priority 30
                     Packet matches: 0 frames 0 bytes
                   Flow class_permit_ip at priority 10 (Inactive)
                     Description:
                     set ip nexthop 12.12.1.2 vrf default priority 30
                     set ip nexthop 12.12.2.2 vrf Vrf-BLUE priority 20
                     set ip nexthop 12.12.1.2 priority 10
                     Packet matches: 0 frames 0 bytes
               </EXAMPLE>
      </DOCGEN>
      <xi:include href="include/pipe.xml"/>
    </COMMAND>
    <!-- show service-policy interface NAME [type qos|monitoring|forwarding] -->
    <COMMAND name="show service-policy interface" help="Shows policy-map binding details by interface name">
      <PARAM name="interface-options" help="Show policies applied for interface" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="eth-if-id" help="Ethernet interface" ptype="PHY_INTERFACE"/>
        <PARAM name="po-if-id" help="PortChannel interface" ptype="PO_INTERFACE"/>
        <PARAM name="vlan-if-id" help="Vlan interface" ptype="VLAN_INTERFACE"/>
        <PARAM name="eth-sub-if-id" help="Ethernet sub-interface" ptype="PHY_INTERFACE_SUBIF"/>
        <PARAM name="po-sub-if-id" help="PortChannel sub-interface" ptype="PO_INTERFACE_SUBIF"/>
        <PARAM name="CPU" help="CPU interface" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <PARAM name="type" help="Policy type" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true">
        <PARAM name="fbs-policy-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
          <PARAM name="qos" help="QoS Policy" ptype="SUBCOMMAND" mode="subcommand" test="( &quot;0&quot;=&quot;0&quot; ) -o ( &quot;0&quot;=&quot;1&quot; ) -o ( &quot;0&quot;=&quot;2&quot; )"/>
          <PARAM name="monitoring" help="Monitoring Policy" ptype="SUBCOMMAND" mode="subcommand" test="( &quot;0&quot;=&quot;0&quot; ) -o ( &quot;0&quot;=&quot;1&quot; )"/>
          <PARAM name="forwarding" help="Forwarding Policy" ptype="SUBCOMMAND" mode="subcommand" test="( &quot;0&quot;=&quot;0&quot; ) -o ( &quot;0&quot;=&quot;1&quot; )"/>
          <PARAM name="copp" help="CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="( &quot;0&quot;=&quot;0&quot; )"/>
          <PARAM name="acl-copp" help="ACL CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="( &quot;0&quot;=&quot;0&quot; ) -o ( &quot;0&quot;=&quot;3&quot; )"/>
        </PARAM>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs show_details_by_interface ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                   Shows flow based services applied policies information by interface name
               </DESCRIPTION>
        <USAGE>
                   policy-map type is optional. If type is not specified then all policies applied to this given interface will be shown. If type is also provided then only corresponding type policies applied on the given interface will be shown
               </USAGE>
        <EXAMPLE summary="Display fbs service applied on given interface vlan 100">
               show service-policy interface Vlan 100
               Vlan100                                      
                 Policy policy_mirror type monitoring at ingress
                 Description:                                   
                   Flow class1 at priority 10 (Active)        
                     Description:                               
                     Packet matches: 0 frames 0 bytes           
                 Policy policy_vrf type forwarding at ingress   
                 Description:                                   
                   Flow class_permit_ipv6 at priority 10 (Inactive)
                     Description:                                  
                     set ipv6 nexthop 1211::2 priority 20          
                     set ipv6 nexthop 1212::2 vrf Vrf-BLUE priority 30
                     Packet matches: 0 frames 0 bytes                 
                   Flow class_permit_ip at priority 10 (Active)     
                     Description:                                     
                     set ip nexthop 12.12.1.2 vrf default priority 30 
                     set ip nexthop 12.12.2.2 vrf Vrf-BLUE priority 20
                     set ip nexthop 12.12.1.2 priority 10             
                     Packet matches: 0 frames 0 bytes                 
                 Policy policy_qos type qos at egress
                 Description:
                   Flow class_permit_ipv6 at priority 10 (Inactive)
                     Description:
                     police: cir 300000000 cbs 300000000 pir 300000000 pbs 300000000 (Active)
                       type bytes mode color-blind
                       operational cir 0 cbs 0 pir 0 pbs 0
                       green 0 packets 0 bytes action forward
                       yellow 0 packets 0 bytes action forward
                       red 0 packets 0 bytes action drop
                     Packet matches: 0 frames 0 bytes
                   Flow class_permit_ip at priority 10 (Inactive)
                     Description:
                     police: cir 300000000 cbs 300000000 pir 300000000 pbs 300000000 (Active)
                       type bytes mode color-blind
                       operational cir 0 cbs 0 pir 0 pbs 0
                       green 0 packets 0 bytes action forward
                       yellow 0 packets 0 bytes action forward
                       red 0 packets 0 bytes action drop
                     Packet matches: 0 frames 0 bytes
               </EXAMPLE>
      </DOCGEN>
      <xi:include href="include/pipe.xml"/>
    </COMMAND>
    <!-- show service-policy [Switch|CtrlPlane] [type qos|monitoring|forwarding] -->
    <COMMAND name="show service-policy" help="Switch/Global interface">
      <PARAM name="interface-type-options" help="Shows policies applied for interface" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="Switch" help="Switch/Global interface" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="CtrlPlane" help="Out of band interface" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <PARAM name="type" help="Policy type" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true">
        <PARAM name="fbs-policy-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
          <PARAM name="qos" help="QoS Policy" ptype="SUBCOMMAND" mode="subcommand" test="( &quot;0&quot;=&quot;0&quot; ) -o ( &quot;0&quot;=&quot;1&quot; ) -o ( &quot;0&quot;=&quot;2&quot; )"/>
          <PARAM name="monitoring" help="Monitoring Policy" ptype="SUBCOMMAND" mode="subcommand" test="( &quot;0&quot;=&quot;0&quot; ) -o ( &quot;0&quot;=&quot;1&quot; )"/>
          <PARAM name="forwarding" help="Forwarding Policy" ptype="SUBCOMMAND" mode="subcommand" test="( &quot;0&quot;=&quot;0&quot; ) -o ( &quot;0&quot;=&quot;1&quot; )"/>
          <PARAM name="copp" help="CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="( &quot;0&quot;=&quot;0&quot; )"/>
          <PARAM name="acl-copp" help="ACL CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="( &quot;0&quot;=&quot;0&quot; ) -o ( &quot;0&quot;=&quot;3&quot; )"/>
        </PARAM>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs show_details_by_interface ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                   Shows Global/Switch level flow based services applied policies information 
               </DESCRIPTION>
        <USAGE>
               </USAGE>
        <EXAMPLE summary="Displays service policies applied at the Switch level">
               Sonic# show service-policy Switch
               Switch
                 Policy policy_vrf type forwarding at ingress
                 Description:
                   Flow class_permit_ipv6 at priority 10 (Inactive)
                     Description:
                     set ipv6 nexthop 1211::2 priority 20
                     set ipv6 nexthop 1212::2 vrf Vrf-BLUE priority 30
                     Packet matches: 0 frames 0 bytes
                   Flow class_permit_ip at priority 10 (Inactive)
                     Description:
                     set ip nexthop 12.12.1.2 vrf default priority 30
                     set ip nexthop 12.12.2.2 vrf Vrf-BLUE priority 20
                     set ip nexthop 12.12.1.2 priority 10
                     Packet matches: 0 frames 0 bytes
               </EXAMPLE>
      </DOCGEN>
      <xi:include href="include/pipe.xml"/>
    </COMMAND>
    <!-- show running-config-configuration class-map -->
    <COMMAND name="show running-configuration class-map" help="Shows current class-map configuration">
      <PARAM name="show-fbs-class-name" help="Name of the class-map" ptype="STRING_63" optional="true"/>
      <ACTION builtin="clish_pyobj">show_config_fbs show_running_class_map ${show-fbs-class-name} </ACTION>
      <DOCGEN>
        <DESCRIPTION>
                   Shows running configuration of class-map(s)
               </DESCRIPTION>
        <USAGE>
                   Class-map name is optional. If Class-map name provided it will show all running configuration of all class-maps configured
               </USAGE>
        <EXAMPLE summary="show running-configuration class-map">
                sonic# show running-configuration class-map class_permit_ipv6
                class-map class_permit_ipv6 match-type fields match-all
               </EXAMPLE>
      </DOCGEN>
      <xi:include href="include/pipe.xml"/>
    </COMMAND>
    <!-- show running-config-configuration policy -->
    <COMMAND name="show running-configuration policy-map" help="Shows current policy-map configuration">
      <PARAM name="show-fbs-policy-name" help="Shows policy-map information using name (Max: 63 characters)" ptype="STRING_63" optional="true"/>
      <ACTION builtin="clish_pyobj">sonic_cli_show_config show_view views=configure-policy view_keys="fbs-policy-name=${show-fbs-policy-name}" </ACTION>
      <DOCGEN>
        <DESCRIPTION>
                   Shows running configuration of policy-map(s)
               </DESCRIPTION>
        <USAGE>
                   Policy-map name is optional. If policy-map name provided it will show all running configuration of all policy-maps configured
               </USAGE>
        <EXAMPLE summary="show running-configuration policy-map">
                  sonic# show running-configuration policy-map policy_vrf
                  policy-map policy_vrf type forwarding
                   class class_permit_ipv6 priority 10
                    set ipv6 next-hop 1211::2  priority 20
                    set ipv6 next-hop 1212::2 vrf Vrf-BLUE priority 30
                   class class_permit_ip priority 10
                    set ip next-hop 12.12.1.2 vrf default priority 30
                    set ip next-hop 12.12.2.2 vrf Vrf-BLUE priority 20
                    set ip next-hop 12.12.1.2  priority 10
               </EXAMPLE>
      </DOCGEN>
      <xi:include href="include/pipe.xml"/>
    </COMMAND>
    <!-- clear counters service-policy policy-map NAME [interface NAME] -->
    <COMMAND name="clear counters service-policy policy-map" help="Clear policy-map binding counters using policy-map name">
      <PARAM name="fbs-policy-name" help="Policy-map name (Max: 63 characters)" ptype="STRING_63"/>
      <PARAM name="interface-type-options" help="Clear counters for policy-maps applied to interface" ptype="SUBCOMMAND" mode="switch" optional="true" order="true">
        <PARAM name="interface" help="Clear counters for policy-maps applied to interface" mode="subcommand" ptype="SUBCOMMAND">
          <PARAM name="interface-options" help="Show policies applied for interface" ptype="SUBCOMMAND" mode="switch">
            <PARAM name="eth-if-id" help="Ethernet interface" ptype="PHY_INTERFACE"/>
            <PARAM name="po-if-id" help="PortChannel interface" ptype="PO_INTERFACE"/>
            <PARAM name="vlan-if-id" help="Vlan interface" ptype="VLAN_INTERFACE"/>
            <PARAM name="eth-sub-if-id" help="Ethernet sub-interface" ptype="PHY_INTERFACE_SUBIF"/>
            <PARAM name="po-sub-if-id" help="PortChannel sub-interface" ptype="PO_INTERFACE_SUBIF"/>
            <PARAM name="CPU" help="CPU interface" ptype="SUBCOMMAND" mode="subcommand"/>
          </PARAM>
        </PARAM>
        <PARAM name="Switch" help="Switch/Global interface" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="CtrlPlane" help="Out of band interface" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_details_by_policy ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Clears flow based services applied policies counters by policy name 
               </DESCRIPTION>
        <USAGE>
                  Interface argument is optional. If not specified it clear fbs policies counters for given policy-map for all interfaces
               </USAGE>
        <EXAMPLE summary="clear counters service-policy policy_name">
                clear counters service-policy policy-map policy_vrf interface Vlan 100
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <!-- clear counters service-policy interface NAME [type qos|monitoring|forwarding] -->
    <COMMAND name="clear counters service-policy interface" help="Clear counters for policy-maps applied to interface">
      <PARAM name="interface-options" help="Show policies applied for interface" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="eth-if-id" help="Ethernet interface" ptype="PHY_INTERFACE"/>
        <PARAM name="po-if-id" help="PortChannel interface" ptype="PO_INTERFACE"/>
        <PARAM name="vlan-if-id" help="Vlan interface" ptype="VLAN_INTERFACE"/>
        <PARAM name="eth-sub-if-id" help="Ethernet sub-interface" ptype="PHY_INTERFACE_SUBIF"/>
        <PARAM name="po-sub-if-id" help="PortChannel sub-interface" ptype="PO_INTERFACE_SUBIF"/>
        <PARAM name="CPU" help="CPU interface" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <PARAM name="type" help="Policy type" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true">
        <PARAM name="fbs-policy-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
          <PARAM name="qos" help="QoS Policy" ptype="SUBCOMMAND" mode="subcommand" test="( &quot;0&quot;=&quot;0&quot; ) -o ( &quot;0&quot;=&quot;1&quot; ) -o ( &quot;0&quot;=&quot;2&quot; )"/>
          <PARAM name="monitoring" help="Monitoring Policy" ptype="SUBCOMMAND" mode="subcommand" test="( &quot;0&quot;=&quot;0&quot; ) -o ( &quot;0&quot;=&quot;1&quot; )"/>
          <PARAM name="forwarding" help="Forwarding Policy" ptype="SUBCOMMAND" mode="subcommand" test="( &quot;0&quot;=&quot;0&quot; ) -o ( &quot;0&quot;=&quot;1&quot; )"/>
          <PARAM name="copp" help="CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="( &quot;0&quot;=&quot;0&quot; )"/>
          <PARAM name="acl-copp" help="ACL CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="( &quot;0&quot;=&quot;0&quot; ) -o ( &quot;0&quot;=&quot;3&quot; )"/>
        </PARAM>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_details_by_interface ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Clears flow based services applied policies counters by interface
               </DESCRIPTION>
        <USAGE>
                  Policy-map type argument is optional. If policy-map type not specified it clear fbs policies counters for given interfaces for all policies matching that interface.
               </USAGE>
        <EXAMPLE summary="clear counters service-policy interface">
                clear counters service-policy interface Vlan 100 type qos               
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <!-- clear counters service-policy Switch [type qos|monitoring|forwarding] -->
    <COMMAND name="clear counters service-policy" help="Clear counters for applied policy-maps">
      <PARAM name="interface-type-options" help="Shows policies applied for interface" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="Switch" help="Switch/Global interface" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="CtrlPlane" help="Out of band interface" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <PARAM name="type" help="Policy type" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true">
        <PARAM name="fbs-policy-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
          <PARAM name="qos" help="QoS Policy" ptype="SUBCOMMAND" mode="subcommand" test="( &quot;0&quot;=&quot;0&quot; ) -o ( &quot;0&quot;=&quot;1&quot; ) -o ( &quot;0&quot;=&quot;2&quot; )"/>
          <PARAM name="monitoring" help="Monitoring Policy" ptype="SUBCOMMAND" mode="subcommand" test="( &quot;0&quot;=&quot;0&quot; ) -o ( &quot;0&quot;=&quot;1&quot; )"/>
          <PARAM name="forwarding" help="Forwarding Policy" ptype="SUBCOMMAND" mode="subcommand" test="( &quot;0&quot;=&quot;0&quot; ) -o ( &quot;0&quot;=&quot;1&quot; )"/>
          <PARAM name="copp" help="CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="( &quot;0&quot;=&quot;0&quot; )"/>
          <PARAM name="acl-copp" help="ACL CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="( &quot;0&quot;=&quot;0&quot; ) -o ( &quot;0&quot;=&quot;3&quot; )"/>
        </PARAM>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_details_by_interface Switch ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Clears flow based services applied policy-map applied at Switch/Global level
               </DESCRIPTION>
        <USAGE>
                  Policy-map type argument is optional. If policy-map type not specified it clear fbs policies counters for given interfaces for all policies matching that interface.
               </USAGE>
        <EXAMPLE summary="clear counters service-policy Switch">
                sonic# clear counters service-policy Switch type qos
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="show pbf" help="Shows policy based forwarding next-hop groups"/>
    <COMMAND name="show pbf next-hop-group" help="Shows group information">
      <PARAM name="show-fbs-nh-grp-name-or-type" help="" ptype="SUBCOMMAND" mode="switch" optional="true">
        <PARAM name="show-fbs-group-name" help="Shows next-hop group information using name (Max: 63 characters)" ptype="STRING_63"/>
        <PARAM name="type" help="Shows all next-hop groups using the group type" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <PARAM name="show-fbs-group-type" help="" ptype="SUBCOMMAND" mode="switch" test="&quot;${show-fbs-group-name}&quot; = &quot;type&quot;">
        <PARAM name="ip" help="Shows all IPv4 next-hop groups" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="ipv6" help="Shows all IPv6 next-hop groups" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs show_pbf_next_hop_group ${__params}</ACTION>
      <xi:include href="include/pipe.xml"/>
    </COMMAND>
    <COMMAND name="show pbf next-hop-group status" help="Shows group information"/>
    <COMMAND name="show pbf next-hop-group status interface" help="Shows group status">
      <PARAM name="show-fbs-group-interface" help="" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="eth-if-id" help="Ethernet interface" ptype="PHY_INTERFACE"/>
        <PARAM name="po-if-id" help="PortChannel interface" ptype="PO_INTERFACE"/>
        <PARAM name="vlan-if-id" help="Vlan interface" ptype="VLAN_INTERFACE"/>
        <PARAM name="eth-sub-if-id" help="Ethernet sub-interface" ptype="PHY_INTERFACE_SUBIF"/>
        <PARAM name="po-sub-if-id" help="PortChannel sub-interface" ptype="PO_INTERFACE_SUBIF"/>
      </PARAM>
      <PARAM name="show-fbs-nh-grp-name-or-type" help="" ptype="SUBCOMMAND" mode="switch" optional="true">
        <PARAM name="show-fbs-group-name" help="Shows next-hop group information using name (Max: 63 characters)" ptype="STRING_63"/>
        <PARAM name="type" help="Shows all next-hop groups using the group type" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <PARAM name="show-fbs-group-type" help="" ptype="SUBCOMMAND" mode="switch" test="&quot;${show-fbs-group-name}&quot; = &quot;type&quot;">
        <PARAM name="ip" help="Shows all IPv4 next-hop groups" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="ipv6" help="Shows all IPv6 next-hop groups" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs show_pbf_next_hop_group_status interface ${__params}</ACTION>
      <xi:include href="include/pipe.xml"/>
    </COMMAND>
    <COMMAND name="show pbf next-hop-group status Switch" help="Shows group status">
      <PARAM name="show-fbs-nh-grp-name-or-type" help="" ptype="SUBCOMMAND" mode="switch" optional="true">
        <PARAM name="show-fbs-group-name" help="Shows next-hop group information using name (Max: 63 characters)" ptype="STRING_63"/>
        <PARAM name="type" help="Shows all next-hop groups using the group type" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <PARAM name="show-fbs-group-type" help="" ptype="SUBCOMMAND" mode="switch" test="&quot;${show-fbs-group-name}&quot; = &quot;type&quot;">
        <PARAM name="ip" help="Shows all IPv4 next-hop groups" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="ipv6" help="Shows all IPv6 next-hop groups" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs show_pbf_next_hop_group_status Switch ${__params}</ACTION>
      <xi:include href="include/pipe.xml"/>
    </COMMAND>
    <COMMAND name="show running-configuration pbf" help="Show current PBF next-hop groups configuration"/>
    <COMMAND name="show running-configuration pbf next-hop-group" help="Show current PBF next-hop groups configuration">
      <PARAM name="show-fbs-group-name" help="Shows next-hop group information using name (Max: 63 characters)" ptype="STRING_63" optional="true"/>
      <ACTION builtin="clish_pyobj">show_config_fbs show_running_next_hop_group_by_name ${show-fbs-group-name}</ACTION>
      <xi:include href="include/pipe.xml"/>
    </COMMAND>
  </VIEW>
  <!--===================================================================================-->
  <!-- Config Mode commands -->
  <!--===================================================================================-->
  <VAR dynamic="true" name="fbs-dynamic-nhgrp-type">
    <ACTION builtin="clish_pyobj">sonic_cli_fbs get_next_hop_group_type ${fbs-nhgrp-name} ${fbs-next-hop-group-type}</ACTION>
  </VAR>
  <VIEW name="configure-view">
    <COMMAND name="policy-map" help="Configures policy-map" view="configure-policy-view" viewid="fbs-policy-name=${fbs-policy-name};fbs-policy-type=${fbs-policy-type}" data_and_render_cb="fbs_policy_render">
      <PARAM name="fbs-policy-name" help="Name of the policy-map (Max: 63 characters)" ptype="STRING_63"/>
      <PARAM name="type" help="Policy type" ptype="SUBCOMMAND" mode="subcommand" optional="false" order="true">
        <PARAM name="fbs-policy-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
          <PARAM name="qos" help="QoS Policy" ptype="SUBCOMMAND" mode="subcommand" test="( &quot;0&quot;=&quot;0&quot; ) -o ( &quot;0&quot;=&quot;1&quot; ) -o ( &quot;0&quot;=&quot;2&quot; )"/>
          <PARAM name="monitoring" help="Monitoring Policy" ptype="SUBCOMMAND" mode="subcommand" test="( &quot;0&quot;=&quot;0&quot; ) -o ( &quot;0&quot;=&quot;1&quot; )"/>
          <PARAM name="forwarding" help="Forwarding Policy" ptype="SUBCOMMAND" mode="subcommand" test="( &quot;0&quot;=&quot;0&quot; ) -o ( &quot;0&quot;=&quot;1&quot; )"/>
          <PARAM name="copp" help="CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="( &quot;0&quot;=&quot;0&quot; )"/>
          <PARAM name="acl-copp" help="ACL CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="( &quot;0&quot;=&quot;0&quot; ) -o ( &quot;0&quot;=&quot;3&quot; )"/>
        </PARAM>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs create_policy_${fbs-policy-type} ${fbs-policy-name} ${fbs-policy-type}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Configures policy-map 
               </DESCRIPTION>
        <USAGE>
                  Policy-map name can be of maximum 63 characters. The name must begin with A-Z, a-z or 0-9. Underscore and hypens can be used except as the first character
               </USAGE>
        <EXAMPLE summary="Creates policy-map of type Forwarding">
               sonic(config)# policy-map policy_vrf type forwarding
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no policy-map" help="Delete policy-map">
      <PARAM name="fbs-policy-name" help="Name of the policy-map (Max: 63 characters)" ptype="STRING_63"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs delete_policy ${fbs-policy-name}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Deletes policy-map 
               </DESCRIPTION>
        <USAGE>
                  Policy-map name can be of maximum 63 characters. The name must begin with A-Z, a-z or 0-9. Underscore and hypens can be used except as the first character
               </USAGE>
        <EXAMPLE summary="Deletes policy-map">
               sonic(config)# no policy-map policy_vrf
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="class-map" help="Configures class-map" view="configure-${fbs-class-type}-classifier-view" viewid="fbs-class-name=${fbs-class-name}" data_and_render_cb="fbs_classifier_render">
      <PARAM name="fbs-class-name" help="Name of the class-map (Max: 63 characters)" ptype="STRING_63"/>
      <PARAM name="match-type" help="Class-map match type" ptype="SUBCOMMAND" mode="subcommand" optional="false">
        <PARAM name="fbs-class-type" help="Class-map match type" ptype="SUBCOMMAND" mode="switch">
          <PARAM name="acl" help="Class-map using ACL as match criteria" ptype="SUBCOMMAND" mode="subcommand"/>
          <PARAM name="fields" help="Class-map using L2-L4 header fields as match criteria" ptype="SUBCOMMAND" mode="subcommand">
            <PARAM name="match-all" help="Match all fields" ptype="SUBCOMMAND" mode="subcommand"/>
          </PARAM>
          <PARAM name="copp" help="Class-map using CoPP as match criteria" ptype="SUBCOMMAND" mode="subcommand"/>
        </PARAM>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs create_classifier_${fbs-class-type} ${fbs-class-name} ${fbs-class-type}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Configures Class-map
               </DESCRIPTION>
        <USAGE>
                  Class-map name can be of maximum 63 characters. The name must begin with A-Z, a-z or 0-9. Underscore and hypens can be used except as the first character. 
               </USAGE>
        <EXAMPLE summary="Creates class-map with match type fields">
               sonic(config)# class-map class_permit_ip match-type fields
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no class-map" help="Delete flow based services class-map">
      <PARAM name="fbs-class-name" help="Name of the class-map (Max: 63 characters)" ptype="STRING_63"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs delete_classifier ${fbs-class-name}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Deletes Class-map 
               </DESCRIPTION>
        <USAGE>
                  Class-map name can be of maximum 63 characters. The name must begin with A-Z, a-z or 0-9. Underscore and hypens can be used except as the first character. 
               </USAGE>
        <EXAMPLE summary="Deletes class-map">
               sonic(config)# no class-map class_permit_ip
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="pbf" help="Policy based forwarding"/>
    <COMMAND name="pbf next-hop-group" help="configure next hop group" view="configure-pbf-${fbs-dynamic-nhgrp-type}-nh-grp-view" viewid="fbs-nh-grp-name=${fbs-nhgrp-name}" data_and_render_cb="show_running_next_hop_group">
      <PARAM name="fbs-nhgrp-name" help="Name of the Next-hop group (Max: 63 characters)" ptype="STRING_63"/>
      <PARAM name="type" help="Next hop group type" ptype="SUBCOMMAND" mode="subcommand" optional="true">
        <PARAM name="fbs-next-hop-group-type" help="" ptype="SUBCOMMAND" mode="switch">
          <PARAM name="ip" help="Next hop group with IPv4 next-hop members" ptype="SUBCOMMAND" mode="subcommand"/>
          <PARAM name="ipv6" help="Next hop group with IPv6 next-hop members" ptype="SUBCOMMAND" mode="subcommand"/>
        </PARAM>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs create_next_hop_group ${fbs-nhgrp-name} ${fbs-next-hop-group-type}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Creates a policy based forwarding next-hop group
               </DESCRIPTION>
        <USAGE>
                  A next-hop-group name can be of maximum 63 characters. The name must begin with A-Z, a-z or 0-9. Underscore and hypens can be used except as the first character. A next-hop-group
                  can be of type ip or ipv6. The group type can not be updated after its created. The group type is mandatory at the time of creating the group.
               </USAGE>
        <EXAMPLE summary="Create an IPv4 next-hop group">
               sonic(config)# pbf next-hop-group ipv4-group-1 type ip
               sonic-cli(config-pbf-ip-nh-group)#
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no pbf" help="Policy based forwarding"/>
    <COMMAND name="no pbf next-hop-group" help="Delete next hop group">
      <PARAM name="fbs-nhgrp-name" help="Name of the Next-hop group (Max: 63 characters)" ptype="STRING_63"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs delete_next_hop_group ${fbs-nhgrp-name}</ACTION>
    </COMMAND>
    <COMMAND name="service-policy" help="Apply ingress or egress policy" data_and_render_cb="fbs_service_policy_render_switch">
      <PARAM name="type" help="Policy type" ptype="SUBCOMMAND" mode="subcommand" optional="false" order="true">
        <PARAM name="fbs-policy-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
          <PARAM name="qos" help="QoS Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;1&quot; ) -o (&quot;1&quot;=&quot;2&quot; )"/>
          <PARAM name="monitoring" help="Monitoring Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;1&quot; )"/>
          <PARAM name="forwarding" help="Forwarding Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;1&quot; )"/>
          <PARAM name="copp" help="CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; )"/>
          <PARAM name="acl-copp" help="ACL CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;3&quot; )"/>
        </PARAM>
      </PARAM>
      <PARAM name="fbs-direction-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="in" help="Ingress direction" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="out" help="Egress direction" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;${fbs-policy-type}&quot;=&quot;qos&quot; ) -a (&quot;Switch&quot; != &quot;CtrlPlane&quot; )"/>
      </PARAM>
      <PARAM name="fbs-policy-name" help="Name of the policy (Max: 63 characters)" ptype="STRING_63"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs bind_policy ${fbs-policy-name} ${fbs-policy-type} ${fbs-direction-type} ${iface} ${vlan_name} ${po_name} Switch</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Applies ingress/egress service policy on given interface 
                    </DESCRIPTION>
        <EXAMPLE summary="Applies ingress/egress service policy">
                       sonic(conf-if-Vlan100)# service-policy type forwarding in policy_vrf
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no service-policy" help="Removes ingress or egress policy">
      <PARAM name="type" help="Policy type" ptype="SUBCOMMAND" mode="subcommand" optional="false" order="true">
        <PARAM name="fbs-policy-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
          <PARAM name="qos" help="QoS Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;1&quot; ) -o (&quot;1&quot;=&quot;2&quot; )"/>
          <PARAM name="monitoring" help="Monitoring Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;1&quot; )"/>
          <PARAM name="forwarding" help="Forwarding Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;1&quot; )"/>
          <PARAM name="copp" help="CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; )"/>
          <PARAM name="acl-copp" help="ACL CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;3&quot; )"/>
        </PARAM>
      </PARAM>
      <PARAM name="fbs-direction-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="in" help="Ingress direction" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="out" help="Egress direction" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;${fbs-policy-type}&quot;=&quot;qos&quot; ) -a (&quot;Switch&quot; != &quot;CtrlPlane&quot; )"/>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs unbind_policy ${fbs-policy-type} ${fbs-direction-type} ${iface} ${vlan_name} ${po_name} Switch</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Removes ingress/egress service policy on given interface 
                    </DESCRIPTION>
        <EXAMPLE summary="Unbinds ingress/egress service policy">
                       sonic(conf-if-Vlan100)# no service-policy type forwarding in
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
  </VIEW>
  <!--===================================================================================-->
  <!-- Policy View -->
  <!--===================================================================================-->
  <VIEW name="configure-policy-view" prompt="${SYSTEM_NAME}(config-policy-map)# " depth="2">
    <NAMESPACE ref="hidden-view" help="false" completion="false"/>
    <NAMESPACE ref="enable-view" help="false" completion="false"/>
    <NAMESPACE ref="enable-view" help="true" prefix="do" completion="true"/>
    <COMMAND name="exit" help="Exit from current mode" lock="false">
            	  <ACTION builtin="clish_nested_up"/>
  </COMMAND>
    <COMMAND name="end" help="Exit to EXEC mode" view="enable-view"/>
    <NAMESPACE ref="configure-view" help="false" completion="false"/>
    <COMMAND name="no" help="Negate a command or set its defaults"/>
    <COMMAND name="description" help="Configures policy-map description">
      <PARAM name="description-value" help="String" ptype="DESCRIPTION"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_policy_description ${fbs-policy-name} description ${description-value}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Configures policy-map description 
               </DESCRIPTION>
        <USAGE>
                  A string describing the policy-map max 256 characters. Description should be in double quotes if it has spaces
               </USAGE>
        <EXAMPLE summary="add description for policy-map">
                  sonic(config-policy-map)# description "Vrf policy information"
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no description" help="Clear policy-map description">
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_policy_description ${fbs-policy-name}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Removes class-map description 
               </DESCRIPTION>
        <USAGE>
                  A string describing the policy-map max 256 characters. Description should be in double quotes if it has spaces
               </USAGE>
        <EXAMPLE summary="removes description for policy-map">
                  sonic(config-policy-map)# no description 
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="class" help="Configures flow match criteria and its actions" view="configure-${fbs-policy-type}-flow-view" viewid="fbs-policy-name=${fbs-policy-name};fbs-policy-type=${fbs-policy-type};fbs-class-name=${fbs-class-name}">
      <PARAM name="fbs-class-name" help="Name of the class-map (Max: 63 characters)" ptype="STRING_63"/>
      <PARAM name="priority" help="Flow priority in the policy-map" ptype="SUBCOMMAND" mode="subcommand" optional="true">
        <PARAM name="fbs-flow-priority" help="Priority value." ptype="FLOW_PRIORITY"/>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs create_flow_${fbs-policy-type} ${fbs-policy-name} ${fbs-class-name} ${fbs-flow-priority}</ACTION>
    </COMMAND>
    <COMMAND name="no class" help="Delete flow match criteria and its actions">
      <PARAM name="fbs-class-name" help="Name of the class-map (Max: 63 characters)" ptype="STRING_63"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs delete_flow_${fbs-policy-type} ${fbs-policy-name} ${fbs-class-name}</ACTION>
    </COMMAND>
  </VIEW>
  <!--===================================================================================-->
  <!-- Classifier view for ACL match-type -->
  <!--===================================================================================-->
  <VIEW name="configure-acl-classifier-view" prompt="${SYSTEM_NAME}(config-class-map)# " depth="2">
    <NAMESPACE ref="hidden-view" help="false" completion="false"/>
    <NAMESPACE ref="enable-view" help="false" completion="false"/>
    <NAMESPACE ref="enable-view" help="true" prefix="do" completion="true"/>
    <COMMAND name="exit" help="Exit from current mode" lock="false">
            	  <ACTION builtin="clish_nested_up"/>
  </COMMAND>
    <COMMAND name="end" help="Exit to EXEC mode" view="enable-view"/>
    <NAMESPACE ref="configure-view" help="false" completion="false"/>
    <COMMAND name="no" help="Negate a command or set its defaults"/>
    <COMMAND name="match" help="Add match criteria"/>
    <COMMAND name="no match" help="Delete match criteria"/>
    <COMMAND name="description" help="Configure class-map description">
      <PARAM name="description-value" help="String" ptype="DESCRIPTION"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_classifier_description ${fbs-class-name} description ${description-value}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Configures Class-map description 
                    </DESCRIPTION>
        <USAGE>
                    </USAGE>
        <EXAMPLE summary="add description for class-map">
                      sonic(config-class-map)# description"ip match type class-map"
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no description" help="Clear class-map description">
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_classifier_description ${fbs-class-name}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Removes class-map description 
                    </DESCRIPTION>
        <USAGE>
                    </USAGE>
        <EXAMPLE summary="removes description for class-map">
                    sonic(config-class-map)# no description
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="match access-group" help="Match using access-list">
      <PARAM name="acl-type" help="" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="mac" help="MAC access-list" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="ip" help="IP access-list" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="ipv6" help="IPv6 access-list" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <PARAM name="access-list-name" help="ACL Name" ptype="STRING_63"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_classifier_match_acl ${fbs-class-name} ${acl-type} ${access-list-name}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Configures class-map match ACL 
               </DESCRIPTION>
        <EXAMPLE summary="Configures class-map match acess-group attributes">
                sonic(config)# class-map class_ip_acl match-type acl
                sonic(config-class-map)# match access-group ip ip_acl1
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no match access-group" help="Delete match using access-list">
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_classifier_match_acl ${fbs-class-name}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Removes class-map match ACL  
               </DESCRIPTION>
        <EXAMPLE summary="Removes class-map match acess-group">
                sonic(config)# class-map class_ip_acl match-type acl
                sonic(config-class-map)# no match access-group 
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
  </VIEW>
  <!--===================================================================================-->
  <!-- Classifier view for fields match-type -->
  <!--===================================================================================-->
  <VIEW name="configure-fields-classifier-view" prompt="${SYSTEM_NAME}(config-class-map)# " depth="2">
    <NAMESPACE ref="hidden-view" help="false" completion="false"/>
    <NAMESPACE ref="enable-view" help="false" completion="false"/>
    <NAMESPACE ref="enable-view" help="true" prefix="do" completion="true"/>
    <COMMAND name="exit" help="Exit from current mode" lock="false">
            	  <ACTION builtin="clish_nested_up"/>
  </COMMAND>
    <COMMAND name="end" help="Exit to EXEC mode" view="enable-view"/>
    <NAMESPACE ref="configure-view" help="false" completion="false"/>
    <COMMAND name="no" help="Negate a command or set its defaults"/>
    <COMMAND name="match" help="Add match criteria"/>
    <COMMAND name="no match" help="Delete match criteria"/>
    <COMMAND name="description" help="Configure class-map description">
      <PARAM name="description-value" help="String" ptype="DESCRIPTION"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_classifier_description ${fbs-class-name} description ${description-value}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Configures Class-map description 
                    </DESCRIPTION>
        <USAGE>
                    </USAGE>
        <EXAMPLE summary="add description for class-map">
                      sonic(config-class-map)# description"ip match type class-map"
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no description" help="Clear class-map description">
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_classifier_description ${fbs-class-name}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Removes class-map description 
                    </DESCRIPTION>
        <USAGE>
                    </USAGE>
        <EXAMPLE summary="removes description for class-map">
                    sonic(config-class-map)# no description
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="match source-address" help="Match packets using source address">
      <PARAM name="address-types" help="address-types" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="mac" help="Match on source MAC address" ptype="SUBCOMMAND" mode="subcommand">
          <PARAM name="source-mac-addr-options-switch" help="" ptype="SUBCOMMAND" mode="switch">
            <PARAM name="source-mac-addr" help="Source MAC address" ptype="ACL_MAC_ADDR">
              <PARAM name="source-mac-mask" help="Source MAC address mask" ptype="ACL_MAC_ADDR"/>
            </PARAM>
            <PARAM name="source-mac-host" help="Source MAC address" ptype="SUBCOMMAND" mode="subcommand" value="host">
              <PARAM name="source-mac-addr" help="Source MAC address value" ptype="ACL_MAC_ADDR"/>
            </PARAM>
          </PARAM>
        </PARAM>
        <PARAM name="ip" help="Match on source IPv4 address" ptype="SUBCOMMAND" mode="subcommand">
          <PARAM name="source-ip-addr-options-switch" help="" ptype="SUBCOMMAND" mode="switch">
            <PARAM name="source-ip-prefix" help="Source IPv4 address prefix" ptype="IP_ADDR_MASK"/>
            <PARAM name="source-ip-host" help="Source host IPv4 address" ptype="SUBCOMMAND" mode="subcommand" value="host">
              <PARAM name="source-ip" help="Source IPv4 address value" ptype="DOTTED_QUAD"/>
            </PARAM>
          </PARAM>
        </PARAM>
        <PARAM name="ipv6" help="Match on source IPv6 address" ptype="SUBCOMMAND" mode="subcommand">
          <PARAM name="source-ip-addr-options-switch" help="" ptype="SUBCOMMAND" mode="switch">
            <PARAM name="source-ip-prefix" help="Source IPv6 address prefix" ptype="IPV6_ADDR_MASK"/>
            <PARAM name="source-ip-host" help="Source host IPv6 address" ptype="SUBCOMMAND" mode="subcommand" value="host">
              <PARAM name="source-ip" help="Source IPv6 address value" ptype="IPV6_ADDR"/>
            </PARAM>
          </PARAM>
        </PARAM>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_match_source_address ${fbs-class-name} ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Configures class-map match packet source-address
               </DESCRIPTION>
        <EXAMPLE summary="Configures class-map match packet source-address">
                   sonic(config)# class-map class1_fields match-type fields match-all 
                   sonic(config-class-map)# match source-address ip 1.1.1.1/32
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no match source-address" help="Delete match using source address">
      <PARAM name="address-types" help="address-types" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="mac" help="Delete match on source MAC address" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="ip" help="Delete match on source IP address" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="ipv6" help="Delete match on source IPv6 address" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_match_source_address ${fbs-class-name} ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Removes class-map match packet source-address
               </DESCRIPTION>
        <EXAMPLE summary="Removes class-map match packet source-address">
                   sonic(config)# class-map class1_fields match-type fields match-all 
                   sonic(config-class-map)# no match source-address
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="match destination-address" help="Match packets using destination address">
      <PARAM name="address-types" help="address-types" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="mac" help="Match on destination MAC address" ptype="SUBCOMMAND" mode="subcommand">
          <PARAM name="destination-mac-addr-options-switch" help="" ptype="SUBCOMMAND" mode="switch">
            <PARAM name="destination-mac-addr" help="Destination MAC address" ptype="ACL_MAC_ADDR">
              <PARAM name="destination-mac-mask" help="Destination MAC address mask" ptype="ACL_MAC_ADDR"/>
            </PARAM>
            <PARAM name="destination-mac-host" help="Destination MAC address" ptype="SUBCOMMAND" mode="subcommand" value="host">
              <PARAM name="destination-mac-addr" help="Destination MAC address value" ptype="ACL_MAC_ADDR"/>
            </PARAM>
          </PARAM>
        </PARAM>
        <PARAM name="ip" help="Match on destination IPv4 address" ptype="SUBCOMMAND" mode="subcommand">
          <PARAM name="destination-ip-addr-options-switch" help="" ptype="SUBCOMMAND" mode="switch">
            <PARAM name="destination-ip-prefix" help="Destination IPv4 address prefix" ptype="IP_ADDR_MASK"/>
            <PARAM name="destination-ip-host" help="Destination host IPv4 address" ptype="SUBCOMMAND" mode="subcommand" value="host">
              <PARAM name="destination-ip" help="Destination IPv4 address value" ptype="DOTTED_QUAD"/>
            </PARAM>
          </PARAM>
        </PARAM>
        <PARAM name="ipv6" help="Match on destination IPv6 address" ptype="SUBCOMMAND" mode="subcommand">
          <PARAM name="destination-ip-addr-options-switch" help="" ptype="SUBCOMMAND" mode="switch">
            <PARAM name="destination-ip-prefix" help="Destination IPv6 address prefix" ptype="IPV6_ADDR_MASK"/>
            <PARAM name="destination-ip-host" help="Destination host IPv6 address" ptype="SUBCOMMAND" mode="subcommand" value="host">
              <PARAM name="destination-ip" help="Destination IPv6 address value" ptype="IPV6_ADDR"/>
            </PARAM>
          </PARAM>
        </PARAM>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_match_destination_address ${fbs-class-name} ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Configures class-map match packet destination-address
               </DESCRIPTION>
        <EXAMPLE summary="Configures class-map match packet source-address">
                   sonic(config)# class-map class1_fields match-type fields match-all 
                   sonic(config-class-map)# match destination-address ip 2.1.1.1/32
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no match destination-address" help="Delete match using destination address">
      <PARAM name="address-types" help="address-types" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="mac" help="Delete match on destination MAC address" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="ip" help="Delete match on destination IP address" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="ipv6" help="Delete match on destination IPv6 address" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_match_destination_address ${fbs-class-name} ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Removes class-map match packet destination-address
               </DESCRIPTION>
        <EXAMPLE summary="Configures class-map match packet source-address">
                   sonic(config)# class-map class1_fields match-type fields match-all 
                   sonic(config-class-map)# no match destination-address
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="match ethertype" help="Match packets using ethertype">
      <PARAM name="ethertype-options" help="Match packets using Ethertype value" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="ethertype-ip" help="IPv4 ethertype (0x800)" ptype="SUBCOMMAND" mode="subcommand" value="ip"/>
        <PARAM name="ethertype-ipv6" help="IPv6 ethertype (0x86dd)" ptype="SUBCOMMAND" mode="subcommand" value="ipv6"/>
        <PARAM name="ethertype-arp" help="ARP ethertype (0x806)" ptype="SUBCOMMAND" mode="subcommand" value="arp"/>
        <PARAM name="ETHERTYPE" help="Ethertype value (0x600-0xffff)" ptype="ETHERTYPE_VALUE"/>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_match_ethertype ${fbs-class-name} ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Configures class-map match packet criteria ethertype 
               </DESCRIPTION>
        <EXAMPLE summary="Configures class-map match packet ethertype">
                   sonic(config)# class-map class1_fields match-type fields match-all 
                   sonic(config-class-map)# match ethertype ip
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no match ethertype" help="Delete match using ethertype">
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_match_ethertype ${fbs-class-name}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Removes class-map match packet criteria ethertype 
               </DESCRIPTION>
        <EXAMPLE summary="Removes class-map match packet ethertype">
                   sonic(config)# class-map class1_fields match-type fields match-all 
                   sonic(config-class-map)# no match ethertype
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="match vlan" help="Match packets using VLAN ID">
      <PARAM name="vlan-val" help="VLAN ID value (range 1-4094)" ptype="VLAN_RANGE"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_match_vlan ${fbs-class-name} ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Configures class-map match packet criteria vlan ID
               </DESCRIPTION>
        <EXAMPLE summary="Configures class-map match packet vlan id ">
                sonic(config)# class-map class1_fields match-type fields match-all 
                sonic(config-class-map)# match vlan 200
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no match vlan" help="Delete match using VLAN ID">
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_match_vlan ${fbs-class-name}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Removes class-map match packet criteria vlan ID
               </DESCRIPTION>
        <EXAMPLE summary="Removes class-map match packet vlan ID ">
                sonic(config)# class-map class1_fields match-type fields match-all 
                sonic(config-class-map)# no match vlan
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="match pcp" help="Match packets using PCP">
      <PARAM name="pcp-options" help="" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="pcp-be" help="Best effort (0)" ptype="SUBCOMMAND" mode="subcommand" value="be"/>
        <PARAM name="pcp-bk" help="Background (1)" ptype="SUBCOMMAND" mode="subcommand" value="bk"/>
        <PARAM name="pcp-ee" help="Excellent effort (2)" ptype="SUBCOMMAND" mode="subcommand" value="ee"/>
        <PARAM name="pcp-ca" help="Critical applications (3)" ptype="SUBCOMMAND" mode="subcommand" value="ca"/>
        <PARAM name="pcp-vi" help="Video, &lt; 100 ms latency and jitter (4)" ptype="SUBCOMMAND" mode="subcommand" value="vi"/>
        <PARAM name="pcp-vo" help="Voice, &lt; 10 ms latency and jitter (5)" ptype="SUBCOMMAND" mode="subcommand" value="vo"/>
        <PARAM name="pcp-ic" help="Internetwork control (6)" ptype="SUBCOMMAND" mode="subcommand" value="ic"/>
        <PARAM name="pcp-nc" help="Network control (7)" ptype="SUBCOMMAND" mode="subcommand" value="nc"/>
        <PARAM name="pcp-val" help="PCP value. (range 0-7)" ptype="PCP_VALUE">
          <PARAM name="pcp-mask" help="PCP value mask" ptype="SUBCOMMAND" mode="subcommand" optional="true" test="&quot;mask&quot;=&quot;mask-disable&quot;">
            <PARAM name="pcp-val-mask" help="PCP value mask (range 0-7)" ptype="PCP_VALUE"/>
          </PARAM>
        </PARAM>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_match_pcp ${fbs-class-name} ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Configures class-map match packet criteria pcp
               </DESCRIPTION>
        <EXAMPLE summary="Configures class-map match packet PCP ">
                sonic(config)# class-map class1_fields match-type fields match-all 
                sonic(config-class-map)# match pcp vi
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no match pcp" help="Match packets using PCP">
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_match_pcp ${fbs-class-name}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Removes class-map match packet criteria pcp
               </DESCRIPTION>
        <EXAMPLE summary="Removes class-map match packet PCP ">
                sonic(config)# class-map class1_fields match-type fields match-all 
                sonic(config-class-map)# no match pcp
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="match dei" help="Match packets using DEI value">
      <PARAM name="dei-val" help="DEI value (range 0-1)" ptype="DEI_VALUE"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_match_dei ${fbs-class-name} ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Configures class-map match packet criteria DEI
               </DESCRIPTION>
        <EXAMPLE summary="Configures class-map match packet PCP ">
                sonic(config)# class-map class1_fields match-type fields match-all 
                sonic(config-class-map)# match dei 0
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no match dei" help="Delete match packets using DEI value">
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_match_dei ${fbs-class-name}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Removes class-map match packet criteria DEI
               </DESCRIPTION>
        <EXAMPLE summary="Removes class-map match packet PCP ">
                sonic(config)# class-map class1_fields match-type fields match-all 
                sonic(config-class-map)# no match dei
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="match ip" help="Match packets using IP/IPv6 protocol"/>
    <COMMAND name="match ip protocol" help="Match packets using IP/IPv6 protocol">
      <PARAM name="ip-protocol" help="" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="ip-protocol-val" help="Protocol number (0 to 255)" ptype="RANGE_0_255"/>
        <PARAM name="icmp" help="ICMP Packets" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="icmpv6" help="ICMPv6 Packets" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="tcp" help="TCP packets" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="udp" help="UDP packets" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_match_ip_protocol ${fbs-class-name} ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Updates class-map match ip attributes
               </DESCRIPTION>
        <EXAMPLE summary="Configures class-map match ip attributes">
                sonic(config)# class-map class1_fields match-type fields match-all 
                sonic(config-class-map)# match ip protocol tcp
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no match ip" help="Delete match packets using IP/IPv6 protocol"/>
    <COMMAND name="no match ip protocol" help="Delete match packets using IP/IPv6 protocol">
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_match_ip_protocol ${fbs-class-name}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Removes class-map match ip attributes
               </DESCRIPTION>
        <EXAMPLE summary="Removes class-map match ip attributes">
                sonic(config)# class-map class1_fields match-type fields match-all 
                sonic(config-class-map)# no match ip protocol
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="match dscp" help="Match packets using DSCP value">
      <PARAM name="dscp-options" help="" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="default" help="Match packets with CS0 DSCP (000000 - Decimal value 0)" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="cs1" help="Match packets with CS1 DSCP (001000 - Decimal value 8)" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="cs2" help="Match packets with CS2 DSCP (010000 - Decimal value 16)" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="cs3" help="Match packets with CS3 DSCP (011000 - Decimal value 24)" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="cs4" help="Match packets with CS4 DSCP (100000 - Decimal value 32)" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="cs5" help="Match packets with CS5 DSCP (101000 - Decimal value 40)" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="cs6" help="Match packets with CS6 DSCP (110000 - Decimal value 48)" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="cs7" help="Match packets with CS7 DSCP (111000 - Decimal value 56)" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="af11" help="Match packets with AF11 DSCP (001010 - Decimal value 10)" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="af12" help="Match packets with AF12 DSCP (001100 - Decimal value 12)" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="af13" help="Match packets with AF13 DSCP (001110 - Decimal value 14)" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="af21" help="Match packets with AF21 DSCP (010010 - Decimal value 18)" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="af22" help="Match packets with AF22 DSCP (010100 - Decimal value 20)" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="af23" help="Match packets with AF23 DSCP (010110 - Decimal value 22)" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="af31" help="Match packets with AF31 DSCP (011010 - Decimal value 26)" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="af32" help="Match packets with AF32 DSCP (011100 - Decimal value 28)" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="af33" help="Match packets with AF33 DSCP (011110 - Decimal value 30)" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="af41" help="Match packets with AF41 DSCP (100010 - Decimal value 34)" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="af42" help="Match packets with AF42 DSCP (100100 - Decimal value 36)" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="af43" help="Match packets with AF43 DSCP (100110 - Decimal value 38)" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="ef" help="Match packets with EF DSCP (101110 - Decimal value 46)" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="voice-admit" help="Match packets with VOICE-ADMIT DSCP (101100 - Decimal value 44)" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="dscp-val" help="DSCP value (range 0-63)" ptype="RANGE_0_63"/>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_match_dscp ${fbs-class-name} ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Configures class-map match dscp
               </DESCRIPTION>
        <EXAMPLE summary="Configures class-map match dscp">
                   sonic(config)# class-map class1_fields match-type fields match-all 
                   sonic(config-class-map)# match dscp cs1
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no match dscp" help="Match DSCP">
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_match_dscp ${fbs-class-name}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Removes class-map match dscp
               </DESCRIPTION>
        <EXAMPLE summary="Configures class-map match dscp">
                   sonic(config)# class-map class1_fields match-type fields match-all 
                   sonic(config-class-map)# no match dscp 
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="match l4-port" help="Match packets using TCP/UDP port">
      <PARAM name="l4-port-type" help="" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="source" help="Match TCP/UDP source port" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="destination" help="Match TCP/UDP destination port" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <PARAM name="l4-port-oper" help="" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="eq" help="Match TCP/UDP Port equal to" ptype="SUBCOMMAND" mode="subcommand">
          <PARAM name="eq-port-val" help="TCP/UDP port number" ptype="RANGE_0_65535"/>
        </PARAM>
        <PARAM name="range" help="Match TCP/UDP port range" ptype="SUBCOMMAND" mode="subcommand">
          <PARAM name="begin-port-val" help="TCP/UDP port number begin" ptype="RANGE_0_65534"/>
          <PARAM name="end-port-val" help="TCP/UDP port number end" ptype="RANGE_1_65535"/>
        </PARAM>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_match_layer4_port ${fbs-class-name} ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Configures class-map match l4 source port
               </DESCRIPTION>
        <USAGE>
                   Match on source port is allowed only when IP protocol is set to TCP or UDP
               </USAGE>
        <EXAMPLE summary="Configures class-map match l4 source port ">
                   sonic(config)# class-map class1_fields match-type fields match-all 
                   sonic(config-class-map)# match l4-port source eq 10
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no match l4-port" help="Delete match packets using TCP/UDP port">
      <PARAM name="l4-port-type" help="" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="source" help="Delete match on source TCP/UDP Port" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="destination" help="Delete match on destination TCP/UDP Port" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_match_layer4_port ${fbs-class-name} ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Removes class-map match l4 source port
               </DESCRIPTION>
        <EXAMPLE summary="Removes class-map match l4 source port">
                   sonic(config)# class-map class1_fields match-type fields match-all 
                   sonic(config-class-map)# no match l4-port source 
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="match tcp-flags" help="Match packets using TCP flags">
      <PARAM name="fin-options" help="" ptype="SUBCOMMAND" mode="switch" optional="true" order="true">
        <PARAM name="fin" help="Match packets with FIN TCP flag set" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="not-fin" help="Match packets with FIN TCP flag cleared" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <PARAM name="syn-options" help="" ptype="SUBCOMMAND" mode="switch" optional="true" order="true">
        <PARAM name="syn" help="Match packets with SYN TCP flag set" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="not-syn" help="Match packets with SYN TCP Flag cleared" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <PARAM name="rst-options" help="" ptype="SUBCOMMAND" mode="switch" optional="true" order="true">
        <PARAM name="rst" help="Match packets with RST TCP flag set" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="not-rst" help="Match packets with RST TCP flag cleared" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <PARAM name="psh-options" help="" ptype="SUBCOMMAND" mode="switch" optional="true" order="true">
        <PARAM name="psh" help="Match packets with PSH TCP flag set" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="not-psh" help="Match packets with PSH TCP flag cleared" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <PARAM name="ack-options" help="" ptype="SUBCOMMAND" mode="switch" optional="true" order="true">
        <PARAM name="ack" help="Match packets with ACK TCP flag set" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="not-ack" help="Match packets with ACK TCP flag cleared" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <PARAM name="urg-options" help="" ptype="SUBCOMMAND" mode="switch" optional="true" order="true">
        <PARAM name="urg" help="Match packets with URG TCP flag set" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="not-urg" help="Match packets with URG TCP flag cleared" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_match_tcp_flags ${fbs-class-name} ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Configures class-map match TCP Flags
               </DESCRIPTION>
        <USAGE>
                   Match on TCP flags is allowed only when IP protocol is set to TCP. not-xxx keyword can be used to match the corresponding flag set to 0
               </USAGE>
        <EXAMPLE summary="Configures class-map match tcp flags">
                   sonic(config)# class-map class1_fields match-type fields match-all 
                   sonic(config-class-map)# match tcp-flags urg
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no match tcp-flags" help="Delete match using TCP flags">
      <PARAM name="fin-options" help="" ptype="SUBCOMMAND" mode="switch" optional="true" order="true">
        <PARAM name="fin" help="Delete match packets with FIN TCP flag set" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="not-fin" help="Delete match packets with FIN TCP flag cleared" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <PARAM name="syn-options" help="" ptype="SUBCOMMAND" mode="switch" optional="true" order="true">
        <PARAM name="syn" help="Delete match packets with SYN TCP flag set" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="not-syn" help="Delete match packets with SYN TCP Flag cleared" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <PARAM name="rst-options" help="" ptype="SUBCOMMAND" mode="switch" optional="true" order="true">
        <PARAM name="rst" help="Delete match packets with RST TCP flag set" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="not-rst" help="Delete match packets with RST TCP flag cleared" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <PARAM name="psh-options" help="" ptype="SUBCOMMAND" mode="switch" optional="true" order="true">
        <PARAM name="psh" help="Delete match packets with PSH TCP flag set" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="not-psh" help="Delete match packets with PSH TCP flag cleared" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <PARAM name="ack-options" help="" ptype="SUBCOMMAND" mode="switch" optional="true" order="true">
        <PARAM name="ack" help="Delete match packets with ACK TCP flag set" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="not-ack" help="Delete match packets with ACK TCP flag cleared" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <PARAM name="urg-options" help="" ptype="SUBCOMMAND" mode="switch" optional="true" order="true">
        <PARAM name="urg" help="Delete match packets with URG TCP flag set" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="not-urg" help="Delete match packets with URG TCP flag cleared" ptype="SUBCOMMAND" mode="subcommand"/>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_match_tcp_flags ${fbs-class-name} ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Removes class-map match TCP Flags
               </DESCRIPTION>
        <USAGE>
                   Match on TCP flags is allowed only when IP protocol is set to TCP. not-xxx keyword can be used to match the corresponding flag set to 0
               </USAGE>
        <EXAMPLE summary="Removes class-map match tcp flags">
                   sonic(config)# class-map class1_fields match-type fields match-all 
                   sonic(config-class-map)# no match tcp-flags urg
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
  </VIEW>
  <!--===================================================================================-->
  <!-- Classifier view for CoPP match-type -->
  <!--===================================================================================-->
  <VIEW name="configure-copp-classifier-view" prompt="${SYSTEM_NAME}(config-class-map)# " depth="2">
    <NAMESPACE ref="hidden-view" help="false" completion="false"/>
    <NAMESPACE ref="enable-view" help="false" completion="false"/>
    <NAMESPACE ref="enable-view" help="true" prefix="do" completion="true"/>
    <COMMAND name="exit" help="Exit from current mode" lock="false">
            	  <ACTION builtin="clish_nested_up"/>
  </COMMAND>
    <COMMAND name="end" help="Exit to EXEC mode" view="enable-view"/>
    <NAMESPACE ref="configure-view" help="false" completion="false"/>
    <COMMAND name="no" help="Negates a command or set its defaults"/>
    <COMMAND name="match" help="Adds a match criteria"/>
    <COMMAND name="no match" help="Deletes a match criteria"/>
    <COMMAND name="description" help="Configure class-map description">
      <PARAM name="description-value" help="String" ptype="DESCRIPTION"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_classifier_description ${fbs-class-name} description ${description-value}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Configures Class-map description 
                    </DESCRIPTION>
        <USAGE>
                    </USAGE>
        <EXAMPLE summary="add description for class-map">
                      sonic(config-class-map)# description"ip match type class-map"
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no description" help="Clear class-map description">
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_classifier_description ${fbs-class-name}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Removes class-map description 
                    </DESCRIPTION>
        <USAGE>
                    </USAGE>
        <EXAMPLE summary="removes description for class-map">
                    sonic(config-class-map)# no description
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="match protocol" help="Matches protocol trap to class-map">
      <PARAM name="trap-id" help="Name of the trap id" ptype="STRING_63" dbpath="sonic-copp:sonic-copp/COPP_TRAP/COPP_TRAP_LIST/trap_ids"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_classifier_match_protocol ${fbs-class-name} ${trap-id}</ACTION>
    </COMMAND>
    <COMMAND name="no match protocol" help="Deletes a match of protocol trap to class-map">
      <PARAM name="trap-id" help="Name of the trap id" ptype="STRING_63"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_classifier_match_protocol ${fbs-class-name} ${trap-id}</ACTION>
    </COMMAND>
  </VIEW>
  <!--===================================================================================-->
  <!-- Flow view for QoS actions -->
  <!--===================================================================================-->
  <VIEW name="configure-qos-flow-view" prompt="${SYSTEM_NAME}(config-policy-map-flow)# " depth="3">
    <NAMESPACE ref="hidden-view" help="false" completion="false"/>
    <NAMESPACE ref="enable-view" help="false" completion="false"/>
    <NAMESPACE ref="enable-view" help="true" prefix="do" completion="true"/>
    <COMMAND name="exit" help="Exit from current mode" lock="false">
            	  <ACTION builtin="clish_nested_up"/>
  </COMMAND>
    <COMMAND name="end" help="Exit to EXEC mode" view="enable-view"/>
    <NAMESPACE ref="configure-policy-view" help="false" completion="false"/>
    <COMMAND name="no" help="Negate a command or set its defaults"/>
    <COMMAND name="set" help="Set parameters"/>
    <COMMAND name="no set" help="Remove/Disable QoS actions"/>
    <COMMAND name="description" help="Configures flow description">
      <PARAM name="description-value" help="String" ptype="DESCRIPTION"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_flow_description ${fbs-policy-name} ${fbs-class-name} description ${description-value}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Updates description for the flows
                    </DESCRIPTION>
        <USAGE>
                       A string describing the flow with max 256 characters. Description should be in double quotes if it has spaces
                    </USAGE>
        <EXAMPLE summary="Configures description for qos flows">
                        sonic(config)# policy-map policy_qos type qos
                        sonic(config-policy-map)# class class_permit_ip priority 10
                        sonic(config-policy-map-flow)# description"flow to match ip traffic and dscp remark to 10"
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no description" help="Clear flow description">
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_flow_description ${fbs-policy-name} ${fbs-class-name}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Removes description for the policy flow.
                    </DESCRIPTION>
        <EXAMPLE summary="Removes description for qos flows">
                        sonic(config)# policy-map policy_qos type qos
                        sonic(config-policy-map)# class class_permit_ip priority 10
                        sonic(config-policy-map-flow)# no description
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="set pcp" help="Set PCP remarking">
      <PARAM name="pcp-value" help="PCP remarking value (0-7)" ptype="PCP_VALUE"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_pcp_remarking_action ${fbs-policy-name} ${fbs-class-name} ${pcp-value}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Configures PCP Remarking action for Qos Flow
               </DESCRIPTION>
        <EXAMPLE summary="Configures PCP remarking action for Qos flow">
                   sonic(config)# policy-map policy_qos type qos
                   sonic(config-policy-map)# class class_permit_ip priority 10
                   sonic(config-policy-map-flow)# set pcp 1
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no set pcp" help="Clear PCP remarking">
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_pcp_remarking_action ${fbs-policy-name} ${fbs-class-name}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Removes PCP Remarking action for Qos Flow
               </DESCRIPTION>
        <EXAMPLE summary="Removes PCP remarking action for Qos flow">
                   sonic(config)# policy-map policy_qos type qos
                   sonic(config-policy-map)# class class_permit_ip priority 10
                   sonic(config-policy-map-flow)# no set pcp
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="set dscp" help="Set DSCP remarking">
      <PARAM name="dscp-value" help="DSCP remarking value (0-63)" ptype="RANGE_0_63"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_dscp_remarking_action ${fbs-policy-name} ${fbs-class-name} ${dscp-value}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Configures DSCP Remarking action for Qos Flow
               </DESCRIPTION>
        <EXAMPLE summary="Configures DSCP remarking action for Qos flow">
                   sonic(config)# policy-map policy_qos type qos
                   sonic(config-policy-map)# class class_permit_ip priority 10
                   sonic(config-policy-map-flow)# set dscp 10
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no set dscp" help="Clear DSCP remarking">
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_dscp_remarking_action ${fbs-policy-name} ${fbs-class-name}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Configures DSCP Remarking action for Qos Flow
               </DESCRIPTION>
        <EXAMPLE summary="Removes DSCP remarking action for Qos flow">
                   sonic(config)# policy-map policy_qos type qos
                   sonic(config-policy-map)# class class_permit_ip priority 10
                   sonic(config-policy-map-flow)# no set dscp
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="set traffic-class" help="Set traffic class">
      <PARAM name="tc-value" help="Traffic class value (0-7)" ptype="PCP_VALUE"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_traffic_class_action ${fbs-policy-name} ${fbs-class-name} ${tc-value}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Configures set traffic class action for Qos Flow
               </DESCRIPTION>
        <EXAMPLE summary="Configures traffic class action for Qos Flow">
                   sonic(config)# policy-map policy_qos type qos
                   sonic(config-policy-map)# class class_permit_ip priority 10
                   sonic(config-policy-map-flow)#set traffic-class 1
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no set traffic-class" help="Clear traffic class">
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_traffic_class_action ${fbs-policy-name} ${fbs-class-name}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Removes set traffic class action for Qos Flow
               </DESCRIPTION>
        <EXAMPLE summary="Removes traffic class action for Qos Flow">
                   sonic(config)# policy-map policy_qos type qos
                   sonic(config-policy-map)# class class_permit_ip priority 10
                   sonic(config-policy-map-flow)# no set traffic-class
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="police" help="Set rate limiting parameters">
      <PARAM name="policer-params" help="" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="cir" help="Committed information rate" ptype="SUBCOMMAND" mode="subcommand">
          <PARAM name="cir-value" help="CIR value. Default is bits per second" ptype="POLICER_RATE_BITS"/>
          <PARAM name="cbs" help="Committed burst size" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true">
            <PARAM name="cbs-value" help="CBS value. Default is bytes" ptype="POLICER_RATE_BYTES"/>
          </PARAM>
          <PARAM name="pir" help="Peak information rate" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true">
            <PARAM name="pir-value" help="PIR value. Default is bits per second" ptype="POLICER_RATE_BITS"/>
          </PARAM>
          <PARAM name="pbs" help="Peak burst size" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true">
            <PARAM name="pbs-value" help="PBS value. Default is bytes" ptype="POLICER_RATE_BYTES"/>
          </PARAM>
        </PARAM>
        <PARAM name="cbs" help="Committed burst size" ptype="SUBCOMMAND" mode="subcommand">
          <PARAM name="cbs-value" help="CBS value. Default is bytes" ptype="POLICER_RATE_BYTES"/>
          <PARAM name="pir" help="Peak information rate" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true">
            <PARAM name="pir-value" help="PIR value. Default is bits per second" ptype="POLICER_RATE_BITS"/>
          </PARAM>
          <PARAM name="pbs" help="Peak burst size" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true">
            <PARAM name="pbs-value" help="PBS value. Default is bytes" ptype="POLICER_RATE_BYTES"/>
          </PARAM>
        </PARAM>
        <PARAM name="pir" help="Peak information rate" ptype="SUBCOMMAND" mode="subcommand">
          <PARAM name="pir-value" help="PIR value. Default is bits per second" ptype="POLICER_RATE_BITS"/>
          <PARAM name="pbs" help="Peak burst size" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true">
            <PARAM name="pbs-value" help="PBS value. Default is bytes" ptype="POLICER_RATE_BYTES"/>
          </PARAM>
        </PARAM>
        <PARAM name="pbs" help="Peak burst size" ptype="SUBCOMMAND" mode="subcommand">
          <PARAM name="pbs-value" help="PBS value. Default is bytes" ptype="POLICER_RATE_BYTES"/>
        </PARAM>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_policer_action ${fbs-policy-name} ${fbs-class-name} ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Configures policer action for qos Flow
                    </DESCRIPTION>
        <USAGE>
                        CIR: Committed information rate in bits per second. CIR is mandatory. The value can be optionally suffixed with kbps(1000), mbps(1000000), gbps (1000000000) or tbps (1000000000000)cir 300000000 cbs 300000000 pir 300000000 pbs 300000000.
                        CBS: Committed burst size in bytes. The value can be suffixed with KB(1000), MB(1000000), GB(1000000000) or TB(1000000000000). The default value is 20% of the CIR in bytes. If configured by the user, it must be greater than or equal to CIR in bytes. 
                        PIR: Peak information rate in bits per second. The value can be optionally suffixed with kbps(1000), mbps(1000000), gbps (1000000000) or tbps (1000000000000). If configured by the user, it must be greater than CIR 
                        PBS: Peak burst size. The value can be suffixed with KB(1000), MB(1000000), GB(1000000000) or TB(1000000000000). The default value is 20% of the PIR value in bytes. If configured by the user, it must be greater than PIR value in bytes and also CBS value 
                        If only CIR is configured, then its 1 rate, 2 color policer.  Any traffic exceeding CIR value will be marked as red and will be dropped.
      
                        If both CIR and PIR is configured, then is 2 rate 3 color policer. Any traffic that exceeds CIR but less than PIR will be marked as yellow. Any traffic that is more than PIR will be marked as red and will be dropped
                    </USAGE>
        <EXAMPLE summary="Configures traffic class action for qos Flow">
                        sonic(config)# policy-map policy_qos type qos
                        sonic(config-policy-map)# class class_permit_ip priority 10
                        sonic(config-policy-map-flow)#cir 300000000 cbs 300000000 pir 300000000 pbs 300000000
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no police" help="Clear or reset rate limiting parameters">
      <PARAM name="cir" help="Clear committed information rate" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true"/>
      <PARAM name="cbs" help="Clear committed burst size" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true"/>
      <PARAM name="pir" help="Clear peak information rate" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true"/>
      <PARAM name="pbs" help="Clear peak burst size" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_policer_action ${fbs-policy-name} ${fbs-class-name} ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Unconfigures policer action for qos Flow
                    </DESCRIPTION>
        <USAGE>
                        CIR: Committed information rate in bits per second. CIR is mandatory. The value can be optionally suffixed with kbps(1000), mbps(1000000), gbps (1000000000) or tbps (1000000000000)cir 300000000 cbs 300000000 pir 300000000 pbs 300000000.
                        CBS: Committed burst size in bytes. The value can be suffixed with KB(1000), MB(1000000), GB(1000000000) or TB(1000000000000). The default value is 20% of the CIR in bytes. If configured by the user, it must be greater than or equal to CIR in bytes. 
                        PIR: Peak information rate in bits per second. The value can be optionally suffixed with kbps(1000), mbps(1000000), gbps (1000000000) or tbps (1000000000000). If configured by the user, it must be greater than CIR 
                        PBS: Peak burst size. The value can be suffixed with KB(1000), MB(1000000), GB(1000000000) or TB(1000000000000). The default value is 20% of the PIR value in bytes. If configured by the user, it must be greater than PIR value in bytes and also CBS value 
                        If only CIR is configured, then its 1 rate, 2 color policer.  Any traffic exceeding CIR value will be marked as red and will be dropped.
      
                        If both CIR and PIR is configured, then is 2 rate 3 color policer. Any traffic that exceeds CIR but less than PIR will be marked as yellow. Any traffic that is more than PIR will be marked as red and will be dropped
                    </USAGE>
        <EXAMPLE summary="Unconfigures traffic class action for qos Flow">
                        sonic(config)# policy-map policy_qos type qos
                        sonic(config-policy-map)# class class_permit_ip priority 10
                        sonic(config-policy-map-flow)#no police 
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
  </VIEW>
  <!--===================================================================================-->
  <!-- Flow view for Monitoring actions -->
  <!--===================================================================================-->
  <VIEW name="configure-monitoring-flow-view" prompt="${SYSTEM_NAME}(config-policy-map-flow)# " depth="3">
    <NAMESPACE ref="hidden-view" help="false" completion="false"/>
    <NAMESPACE ref="enable-view" help="false" completion="false"/>
    <NAMESPACE ref="enable-view" help="true" prefix="do" completion="true"/>
    <COMMAND name="exit" help="Exit from current mode" lock="false">
            	  <ACTION builtin="clish_nested_up"/>
  </COMMAND>
    <COMMAND name="end" help="Exit to EXEC mode" view="enable-view"/>
    <NAMESPACE ref="configure-policy-view" help="false" completion="false"/>
    <COMMAND name="set" help="Set parameters"/>
    <COMMAND name="no" help="Negate a command or set its defaults"/>
    <COMMAND name="no set" help="Remove/Disable monitoring actions"/>
    <COMMAND name="description" help="Configures flow description">
      <PARAM name="description-value" help="String" ptype="DESCRIPTION"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_flow_description ${fbs-policy-name} ${fbs-class-name} description ${description-value}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Updates description for the flows
                    </DESCRIPTION>
        <USAGE>
                       A string describing the flow with max 256 characters. Description should be in double quotes if it has spaces
                    </USAGE>
        <EXAMPLE summary="Configures description for qos flows">
                        sonic(config)# policy-map policy_qos type qos
                        sonic(config-policy-map)# class class_permit_ip priority 10
                        sonic(config-policy-map-flow)# description"flow to match ip traffic and dscp remark to 10"
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no description" help="Clear flow description">
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_flow_description ${fbs-policy-name} ${fbs-class-name}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Removes description for the policy flow.
                    </DESCRIPTION>
        <EXAMPLE summary="Removes description for qos flows">
                        sonic(config)# policy-map policy_qos type qos
                        sonic(config-policy-map)# class class_permit_ip priority 10
                        sonic(config-policy-map-flow)# no description
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="set mirror-session" help="Set mirror session result">
      <PARAM name="session-name" help="Mirror session name" ptype="STRING"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_mirror_session_action ${fbs-policy-name} ${fbs-class-name} ${session-name}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Configures mirror session name for monitoring flow
               </DESCRIPTION>
        <EXAMPLE summary="Configures mirror session name for monitoring Flow">
                   sonic(config)# policy-map policy_mirror type monitoring
                   sonic(config-policy-map)# class class1 priority 10
                   sonic(config-policy-map-flow)# set mirror-session mirror1
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no set mirror-session" help="Delete mirror session result">
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_mirror_session_action ${fbs-policy-name} ${fbs-class-name}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Unconfigures mirror session name for monitoring flow
               </DESCRIPTION>
        <EXAMPLE summary="Unconfiguresd mirror session name for monitoring Flow">
                   sonic(config)# policy-map policy_mirror type monitoring
                   sonic(config-policy-map)# class class1 priority 10
                   sonic(config-policy-map-flow)# no set mirror-session
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
  </VIEW>
  <!--===================================================================================-->
  <!-- Flow view for Forwarding actions -->
  <!--===================================================================================-->
  <VIEW name="configure-forwarding-flow-view" prompt="${SYSTEM_NAME}(config-policy-map-flow)# " depth="3">
    <NAMESPACE ref="hidden-view" help="false" completion="false"/>
    <NAMESPACE ref="enable-view" help="false" completion="false"/>
    <NAMESPACE ref="enable-view" help="true" prefix="do" completion="true"/>
    <COMMAND name="exit" help="Exit from current mode" lock="false">
            	  <ACTION builtin="clish_nested_up"/>
  </COMMAND>
    <COMMAND name="end" help="Exit to EXEC mode" view="enable-view"/>
    <NAMESPACE ref="configure-policy-view" help="false" completion="false"/>
    <COMMAND name="set" help="Set parameters"/>
    <COMMAND name="description" help="Configures flow description">
      <PARAM name="description-value" help="String" ptype="DESCRIPTION"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_flow_description ${fbs-policy-name} ${fbs-class-name} description ${description-value}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Updates description for the flows
                    </DESCRIPTION>
        <USAGE>
                       A string describing the flow with max 256 characters. Description should be in double quotes if it has spaces
                    </USAGE>
        <EXAMPLE summary="Configures description for qos flows">
                        sonic(config)# policy-map policy_qos type qos
                        sonic(config-policy-map)# class class_permit_ip priority 10
                        sonic(config-policy-map-flow)# description"flow to match ip traffic and dscp remark to 10"
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no description" help="Clear flow description">
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_flow_description ${fbs-policy-name} ${fbs-class-name}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Removes description for the policy flow.
                    </DESCRIPTION>
        <EXAMPLE summary="Removes description for qos flows">
                        sonic(config)# policy-map policy_qos type qos
                        sonic(config-policy-map)# class class_permit_ip priority 10
                        sonic(config-policy-map-flow)# no description
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="set ip" help="Internet Protocol Version 4 (IPv4)">
      <PARAM name="next-hop-or-group" help="" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="next-hop" help="Next hop" ptype="SUBCOMMAND" mode="subcommand">
          <PARAM name="ip-address" help="IPv4 address Value" ptype="DOTTED_QUAD"/>
          <PARAM name="vrf" help="Next hop VRF" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true">
            <PARAM name="vrf-options" help="" ptype="SUBCOMMAND" mode="switch">
              <PARAM name="vrf-name" help="Next hop VRF name" ptype="VRF_NAME"/>
              <PARAM name="default" help="Default VRF" ptype="SUBCOMMAND" mode="subcommand"/>
            </PARAM>
          </PARAM>
        </PARAM>
        <PARAM name="next-hop-group" help="IPv4 next-hop group" ptype="SUBCOMMAND" mode="subcommand">
          <PARAM name="pbf-nh-grp" help="IPv4 next-hop group name (Max: 63 characters)" ptype="STRING_63"/>
        </PARAM>
      </PARAM>
      <PARAM name="priority" help="Priority of the Next hop" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true" test="&quot;${egress-intf-options}&quot; != &quot;null&quot;">
        <PARAM name="priority-value" help="Priority value" ptype="RANGE_1_65535"/>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_${next-hop-or-group}_action ${fbs-policy-name} ${fbs-class-name} ip ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Configures ip next hop for forwarding flow
               </DESCRIPTION>
        <USAGE>
                   If the VRF name is not specified then it will be derived from the VRF of the interface on which the policy is applied or default will be used for global application.
                   Priority of the next-hop. Range is 1-65535. Default is 0 ie lowest priority if not configured by the user. The next-hop with the higher priority will be picked up for forwarding first.
                   If more than 1 next-hops have the same priority then the next-hop which is configured first will be used.
               </USAGE>
        <EXAMPLE summary="Configures ip next hop for forwarding Flow">
                   sonic(config)# policy-map policy_vrf type forwarding
                   sonic(config-policy-map)# class class_permit_ip priority 10
                   set ip next-hop 12.12.2.2 vrf Vrf-BLUE priority 20
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="set ipv6" help="Internet Protocol Version 6 (IPv6)">
      <PARAM name="next-hop-or-group" help="" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="next-hop" help="Next hop" ptype="SUBCOMMAND" mode="subcommand">
          <PARAM name="ip-address" help="IPv6 address Value" ptype="IPV6_ADDR"/>
          <PARAM name="vrf" help="Next hop VRF" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true">
            <PARAM name="vrf-options" help="" ptype="SUBCOMMAND" mode="switch">
              <PARAM name="vrf-name" help="Next hop VRF name" ptype="VRF_NAME"/>
              <PARAM name="default" help="Default VRF" ptype="SUBCOMMAND" mode="subcommand"/>
            </PARAM>
          </PARAM>
        </PARAM>
        <PARAM name="next-hop-group" help="IPv6 next-hop group" ptype="SUBCOMMAND" mode="subcommand">
          <PARAM name="pbf-nh-grp" help="IPv6 next-hop group name (Max: 63 characters)" ptype="STRING_63"/>
        </PARAM>
      </PARAM>
      <PARAM name="priority" help="Priority of the Next hop" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true" test="&quot;${egress-intf-options}&quot; != &quot;null&quot;">
        <PARAM name="priority-value" help="Priority value" ptype="RANGE_1_65535"/>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_${next-hop-or-group}_action ${fbs-policy-name} ${fbs-class-name} ipv6 ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Configures ipv6 next hop for forwarding flow
               </DESCRIPTION>
        <USAGE>
                   If the VRF name is not specified then it will be derived from the VRF of the interface on which the policy is applied or default will be used for global application.
                   Priority of the next-hop. Range is 1-65535. Default is 0 ie lowest priority if not configured by the user. The next-hop with the higher priority will be picked up for forwarding first.
                   If more than 1 next-hops have the same priority then the next-hop which is configured first will be used.
               </USAGE>
        <EXAMPLE summary="Configures ipv6 next hop for forwarding Flow">
                   sonic(config)# policy-map policy_vrf type forwarding
                   sonic(config-policy-map)# class class_permit_ipv6 priority 10
                   sonic(config-policy-map)# set ipv6 next-hop 1211::2 priority 20
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="set interface" help="Set egress interface">
      <PARAM name="egress-intf-options" help="" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="null" help="Drop traffic" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="port-id" help="Port number" ptype="PHY_INTERFACE" completion="false"/>
        <PARAM name="portchannel-id" help="Lag number" ptype="PO_INTERFACE" completion="false"/>
      </PARAM>
      <PARAM name="priority" help="Priority of the Next hop" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true" test="&quot;${egress-intf-options}&quot; != &quot;null&quot;">
        <PARAM name="priority-value" help="Priority value" ptype="RANGE_1_65535"/>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_egress_interface_action ${fbs-policy-name} ${fbs-class-name} ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Configures ip interface for forwarding flow
               </DESCRIPTION>
        <USAGE>
                   Egress interfaces configuration is valid only if the classifier uses MAC/L2 ACL for match. Only L2 switched traffic will be forwarded to the configured egress interface.
                   Combining egress interface with IPv4 or IPv6 next-hops is not permitted. Drop action(set interface to null) if configured will be of the lowest priority and will be chosen if none
                   of the configured next-hops or egress interfaces can be used for forwarding.
               </USAGE>
        <EXAMPLE summary="Configures ip next hop for forwarding Flow">
                   sonic(config)# policy-map policy_vrf type forwarding
                   sonic(config-policy-map)# class class10 priority 10
                   sonic(config-policy-map-flow)# set interface Eth 1/9
                   sonic(config-policy-map-flow)# set interface null
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no" help="Negate a command or set its defaults"/>
    <COMMAND name="no set" help="Remove/Disable forwarding actions"/>
    <COMMAND name="no set ip" help="Internet Protocol Version 4 (IPv4)">
      <PARAM name="next-hop-or-group" help="" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="next-hop" help="Next hop" ptype="SUBCOMMAND" mode="subcommand">
          <PARAM name="ip-address" help="IPv4 address Value" ptype="DOTTED_QUAD"/>
          <PARAM name="vrf" help="Next hop VRF" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true">
            <PARAM name="vrf-options" help="" ptype="SUBCOMMAND" mode="switch">
              <PARAM name="vrf-name" help="Next hop VRF name" ptype="VRF_NAME"/>
              <PARAM name="default" help="Default VRF" ptype="SUBCOMMAND" mode="subcommand"/>
            </PARAM>
          </PARAM>
        </PARAM>
        <PARAM name="next-hop-group" help="IPv4 next-hop group" ptype="SUBCOMMAND" mode="subcommand">
          <PARAM name="pbf-nh-grp" help="IPv4 next-hop group name (Max: 63 characters)" ptype="STRING_63"/>
        </PARAM>
      </PARAM>
      <PARAM name="priority" help="Priority of the Next hop" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true" test="&quot;${egress-intf-options}&quot; != &quot;null&quot;">
        <PARAM name="priority-value" help="Priority value" ptype="RANGE_1_65535"/>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_${next-hop-or-group}_action ${fbs-policy-name} ${fbs-class-name} ip ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Unconfigures ip next hop for forwarding flow
               </DESCRIPTION>
        <USAGE>
                   If the VRF name is not specified then it will be derived from the VRF of the interface on which the policy is applied or default will be used for global application.
                   Priority of the next-hop. Range is 1-65535. Default is 0 ie lowest priority if not configured by the user. The next-hop with the higher priority will be picked up for forwarding first.
                   If more than 1 next-hops have the same priority then the next-hop which is configured first will be used
               </USAGE>
        <EXAMPLE summary="Unconfigures ip next hop for forwarding Flow">
                   sonic(config)# policy-map policy_vrf type forwarding
                   sonic(config-policy-map)# class class_permit_ip priority 10
                   sonic(config-policy-map-flow)#no set ip next-hop 12.12.2.2 vrf Vrf-BLUE priority 20
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no set ipv6" help="Internet Protocol Version 6 (IPv6)">
      <PARAM name="next-hop-or-group" help="" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="next-hop" help="Next hop" ptype="SUBCOMMAND" mode="subcommand">
          <PARAM name="ip-address" help="IPv6 address Value" ptype="IPV6_ADDR"/>
          <PARAM name="vrf" help="Next hop VRF" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true">
            <PARAM name="vrf-options" help="" ptype="SUBCOMMAND" mode="switch">
              <PARAM name="vrf-name" help="Next hop VRF name" ptype="VRF_NAME"/>
              <PARAM name="default" help="Default VRF" ptype="SUBCOMMAND" mode="subcommand"/>
            </PARAM>
          </PARAM>
        </PARAM>
        <PARAM name="next-hop-group" help="IPv6 next-hop group" ptype="SUBCOMMAND" mode="subcommand">
          <PARAM name="pbf-nh-grp" help="IPv6 next-hop group name (Max: 63 characters)" ptype="STRING_63"/>
        </PARAM>
      </PARAM>
      <PARAM name="priority" help="Priority of the Next hop" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true" test="&quot;${egress-intf-options}&quot; != &quot;null&quot;">
        <PARAM name="priority-value" help="Priority value" ptype="RANGE_1_65535"/>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_${next-hop-or-group}_action ${fbs-policy-name} ${fbs-class-name} ipv6 ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Unconfigures ipv6 next hop for forwarding flow
               </DESCRIPTION>
        <USAGE>
                   If the VRF name is not specified then it will be derived from the VRF of the interface on which the policy is applied or default will be used for global application.
                   Priority of the next-hop. Range is 1-65535. Default is 0 ie lowest priority if not configured by the user. The next-hop with the higher priority will be picked up for forwarding first. If more than 1 next-hops have the same priority then the next-hop which is configured first will be used
               </USAGE>
        <EXAMPLE summary="Unconfigures ipv6 next hop for forwarding Flow">
                   sonic(config)# policy-map policy_vrf type forwarding
                   sonic(config-policy-map)# class class_permit_ipv6 priority 10
                   sonic(config-policy-map)# no set ipv6 next-hop 1211::2  priority 20
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no set interface" help="Set egress interface">
      <PARAM name="egress-intf-options" help="" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="null" help="Drop traffic" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="port-id" help="Port number" ptype="PHY_INTERFACE" completion="false"/>
        <PARAM name="portchannel-id" help="Lag number" ptype="PO_INTERFACE" completion="false"/>
      </PARAM>
      <PARAM name="priority" help="Priority of the Next hop" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true" test="&quot;${egress-intf-options}&quot; != &quot;null&quot;">
        <PARAM name="priority-value" help="Priority value" ptype="RANGE_1_65535"/>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_egress_interface_action ${fbs-policy-name} ${fbs-class-name} ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Unconfigures ip interface for forwarding flow
               </DESCRIPTION>
        <USAGE>
                   Egress interfaces configuration is valid only if the classifier uses MAC/L2 ACL for match. Only L2 switched traffic will be forwarded to the configured egress interface.  Combining egress interface with IPv4 or IPv6 next-hops is not permitted.
                   Drop action(set interface to null) if configured will be of the lowest priority and will be chosen if none of the configured next-hops or egress interfaces can be used for forwarding
               </USAGE>
        <EXAMPLE summary="Unconfigures ip next hop for forwarding Flow">
                   sonic(config)# policy-map policy_vrf type forwarding
                   sonic(config-policy-map)# class class10 priority 10
                   sonic(config-policy-map-flow)# no set interface Eth 1/9
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
  </VIEW>
  <!--===================================================================================-->
  <!-- Flow view for CoPP actions -->
  <!--===================================================================================-->
  <VIEW name="configure-copp-flow-view" prompt="${SYSTEM_NAME}(config-policy-map-flow)# " depth="3">
    <NAMESPACE ref="hidden-view" help="false" completion="false"/>
    <NAMESPACE ref="enable-view" help="false" completion="false"/>
    <NAMESPACE ref="enable-view" help="true" prefix="do" completion="true"/>
    <COMMAND name="exit" help="Exit from current mode" lock="false">
            	  <ACTION builtin="clish_nested_up"/>
  </COMMAND>
    <COMMAND name="end" help="Exit to EXEC mode" view="enable-view"/>
    <NAMESPACE ref="configure-policy-view" help="false" completion="false"/>
    <COMMAND name="set" help="Set parameters"/>
    <COMMAND name="description" help="Configures flow description">
      <PARAM name="description-value" help="String" ptype="DESCRIPTION"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_flow_description ${fbs-policy-name} ${fbs-class-name} description ${description-value}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Updates description for the flows
                    </DESCRIPTION>
        <USAGE>
                       A string describing the flow with max 256 characters. Description should be in double quotes if it has spaces
                    </USAGE>
        <EXAMPLE summary="Configures description for qos flows">
                        sonic(config)# policy-map policy_qos type qos
                        sonic(config-policy-map)# class class_permit_ip priority 10
                        sonic(config-policy-map-flow)# description"flow to match ip traffic and dscp remark to 10"
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no description" help="Clear flow description">
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_flow_description ${fbs-policy-name} ${fbs-class-name}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Removes description for the policy flow.
                    </DESCRIPTION>
        <EXAMPLE summary="Removes description for qos flows">
                        sonic(config)# policy-map policy_qos type qos
                        sonic(config-policy-map)# class class_permit_ip priority 10
                        sonic(config-policy-map-flow)# no description
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="set copp-action" help="Binds a CoPP action group to the class-map">
      <PARAM name="copp-action-name" help="Name of the CoPP action group (up to 63 characters)" ptype="STRING_63"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_copp_action_group ${fbs-policy-name} ${fbs-class-name} ${copp-action-name}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Updates class-map match ACL attributes 
               </DESCRIPTION>
        <EXAMPLE summary="Configures class-map match acess-group attributes">
                sonic(config)# class-map class_ip_acl match-type acl
                sonic(config-class-map)# match access-group ip ip_acl1
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
  </VIEW>
  <!--===================================================================================-->
  <!-- Flow view for ACL-COPP actions -->
  <!--===================================================================================-->
  <VIEW name="configure-acl-copp-flow-view" prompt="${SYSTEM_NAME}(config-policy-map-flow)# " depth="3">
    <NAMESPACE ref="hidden-view" help="false" completion="false"/>
    <NAMESPACE ref="enable-view" help="false" completion="false"/>
    <NAMESPACE ref="enable-view" help="true" prefix="do" completion="true"/>
    <COMMAND name="exit" help="Exit from current mode" lock="false">
            	  <ACTION builtin="clish_nested_up"/>
  </COMMAND>
    <COMMAND name="end" help="Exit to EXEC mode" view="enable-view"/>
    <NAMESPACE ref="configure-policy-view" help="false" completion="false"/>
    <COMMAND name="no" help="Negate a command or set its defaults"/>
    <COMMAND name="set" help="Set parameters"/>
    <COMMAND name="no set" help="Remove/Disable ACL-COPP actions"/>
    <COMMAND name="description" help="Configures flow description">
      <PARAM name="description-value" help="String" ptype="DESCRIPTION"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_flow_description ${fbs-policy-name} ${fbs-class-name} description ${description-value}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Updates description for the flows
                    </DESCRIPTION>
        <USAGE>
                       A string describing the flow with max 256 characters. Description should be in double quotes if it has spaces
                    </USAGE>
        <EXAMPLE summary="Configures description for qos flows">
                        sonic(config)# policy-map policy_qos type qos
                        sonic(config-policy-map)# class class_permit_ip priority 10
                        sonic(config-policy-map-flow)# description"flow to match ip traffic and dscp remark to 10"
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no description" help="Clear flow description">
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_flow_description ${fbs-policy-name} ${fbs-class-name}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Removes description for the policy flow.
                    </DESCRIPTION>
        <EXAMPLE summary="Removes description for qos flows">
                        sonic(config)# policy-map policy_qos type qos
                        sonic(config-policy-map)# class class_permit_ip priority 10
                        sonic(config-policy-map-flow)# no description
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="set trap-queue" help="Set CoPP queue id">
      <PARAM name="trap-queue-id-value" help="CPU queue ID value (0-31)" ptype="TRAP_QUEUE"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_acl_copp_queue_id_action ${fbs-policy-name} ${fbs-class-name} ${trap-queue-id-value}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Configures CPU Queue for ACL-CoPP flows
               </DESCRIPTION>
        <EXAMPLE summary="Configures CPU Queue for acl-copp flows">
                   sonic(config)# policy-map policy3 type acl-copp
                   sonic(config-policy-map)# class class0 priority 100
                   sonic(config-policy-map-flow)# set trap-queue 30
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no set trap-queue" help="Clear CoPP queue id">
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_acl_copp_queue_id_action ${fbs-policy-name} ${fbs-class-name}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                  Removes set CPU Queue for ACL-CoPP flows
               </DESCRIPTION>
        <EXAMPLE summary="Removes CPU Queue for acl-copp flows">
                   sonic(config)# policy-map policy3 type acl-copp
                   sonic(config-policy-map)# class class0 priority 100
                   sonic(config-policy-map-flow)# no set trap-queue
               </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="police" help="Set rate limiting parameters">
      <PARAM name="policer-params" help="" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="cir" help="Committed information rate" ptype="SUBCOMMAND" mode="subcommand">
          <PARAM name="cir-value" help="CIR value. Default is bits per second" ptype="POLICER_RATE_BITS"/>
          <PARAM name="cbs" help="Committed burst size" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true">
            <PARAM name="cbs-value" help="CBS value. Default is bytes" ptype="POLICER_RATE_BYTES"/>
          </PARAM>
          <PARAM name="pir" help="Peak information rate" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true">
            <PARAM name="pir-value" help="PIR value. Default is bits per second" ptype="POLICER_RATE_BITS"/>
          </PARAM>
          <PARAM name="pbs" help="Peak burst size" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true">
            <PARAM name="pbs-value" help="PBS value. Default is bytes" ptype="POLICER_RATE_BYTES"/>
          </PARAM>
        </PARAM>
        <PARAM name="cbs" help="Committed burst size" ptype="SUBCOMMAND" mode="subcommand">
          <PARAM name="cbs-value" help="CBS value. Default is bytes" ptype="POLICER_RATE_BYTES"/>
          <PARAM name="pir" help="Peak information rate" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true">
            <PARAM name="pir-value" help="PIR value. Default is bits per second" ptype="POLICER_RATE_BITS"/>
          </PARAM>
          <PARAM name="pbs" help="Peak burst size" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true">
            <PARAM name="pbs-value" help="PBS value. Default is bytes" ptype="POLICER_RATE_BYTES"/>
          </PARAM>
        </PARAM>
        <PARAM name="pir" help="Peak information rate" ptype="SUBCOMMAND" mode="subcommand">
          <PARAM name="pir-value" help="PIR value. Default is bits per second" ptype="POLICER_RATE_BITS"/>
          <PARAM name="pbs" help="Peak burst size" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true">
            <PARAM name="pbs-value" help="PBS value. Default is bytes" ptype="POLICER_RATE_BYTES"/>
          </PARAM>
        </PARAM>
        <PARAM name="pbs" help="Peak burst size" ptype="SUBCOMMAND" mode="subcommand">
          <PARAM name="pbs-value" help="PBS value. Default is bytes" ptype="POLICER_RATE_BYTES"/>
        </PARAM>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_acl_copp_policer_action ${fbs-policy-name} ${fbs-class-name} ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Configures policer action for acl-copp Flow
                    </DESCRIPTION>
        <USAGE>
                        CIR: Committed information rate in bits per second. CIR is mandatory. The value can be optionally suffixed with kbps(1000), mbps(1000000), gbps (1000000000) or tbps (1000000000000)cir 300000000 cbs 300000000 pir 300000000 pbs 300000000.
                        CBS: Committed burst size in bytes. The value can be suffixed with KB(1000), MB(1000000), GB(1000000000) or TB(1000000000000). The default value is 20% of the CIR in bytes. If configured by the user, it must be greater than or equal to CIR in bytes. 
                        PIR: Peak information rate in bits per second. The value can be optionally suffixed with kbps(1000), mbps(1000000), gbps (1000000000) or tbps (1000000000000). If configured by the user, it must be greater than CIR 
                        PBS: Peak burst size. The value can be suffixed with KB(1000), MB(1000000), GB(1000000000) or TB(1000000000000). The default value is 20% of the PIR value in bytes. If configured by the user, it must be greater than PIR value in bytes and also CBS value 
                        If only CIR is configured, then its 1 rate, 2 color policer.  Any traffic exceeding CIR value will be marked as red and will be dropped.
      
                        If both CIR and PIR is configured, then is 2 rate 3 color policer. Any traffic that exceeds CIR but less than PIR will be marked as yellow. Any traffic that is more than PIR will be marked as red and will be dropped
                    </USAGE>
        <EXAMPLE summary="Configures traffic class action for acl-copp Flow">
                        sonic(config)# policy-map policy_acl-copp type acl-copp
                        sonic(config-policy-map)# class class_permit_ip priority 10
                        sonic(config-policy-map-flow)#cir 300000000 cbs 300000000 pir 300000000 pbs 300000000
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no police" help="Clear or reset rate limiting parameters">
      <PARAM name="cir" help="Clear committed information rate" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true"/>
      <PARAM name="cbs" help="Clear committed burst size" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true"/>
      <PARAM name="pir" help="Clear peak information rate" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true"/>
      <PARAM name="pbs" help="Clear peak burst size" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs clear_acl_copp_policer_action ${fbs-policy-name} ${fbs-class-name} ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Unconfigures policer action for acl-copp Flow
                    </DESCRIPTION>
        <USAGE>
                        CIR: Committed information rate in bits per second. CIR is mandatory. The value can be optionally suffixed with kbps(1000), mbps(1000000), gbps (1000000000) or tbps (1000000000000)cir 300000000 cbs 300000000 pir 300000000 pbs 300000000.
                        CBS: Committed burst size in bytes. The value can be suffixed with KB(1000), MB(1000000), GB(1000000000) or TB(1000000000000). The default value is 20% of the CIR in bytes. If configured by the user, it must be greater than or equal to CIR in bytes. 
                        PIR: Peak information rate in bits per second. The value can be optionally suffixed with kbps(1000), mbps(1000000), gbps (1000000000) or tbps (1000000000000). If configured by the user, it must be greater than CIR 
                        PBS: Peak burst size. The value can be suffixed with KB(1000), MB(1000000), GB(1000000000) or TB(1000000000000). The default value is 20% of the PIR value in bytes. If configured by the user, it must be greater than PIR value in bytes and also CBS value 
                        If only CIR is configured, then its 1 rate, 2 color policer.  Any traffic exceeding CIR value will be marked as red and will be dropped.
      
                        If both CIR and PIR is configured, then is 2 rate 3 color policer. Any traffic that exceeds CIR but less than PIR will be marked as yellow. Any traffic that is more than PIR will be marked as red and will be dropped
                    </USAGE>
        <EXAMPLE summary="Unconfigures traffic class action for acl-copp Flow">
                        sonic(config)# policy-map policy_acl-copp type acl-copp
                        sonic(config-policy-map)# class class_permit_ip priority 10
                        sonic(config-policy-map-flow)#no police 
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
  </VIEW>
  <!--===================================================================================-->
  <!-- Policy binding CLIs for Ethernet -->
  <!--===================================================================================-->
  <VIEW name="configure-if-view">
    <COMMAND name="service-policy" help="Apply ingress or egress policy" data_and_render_cb="fbs_service_policy_render_interface">
      <PARAM name="type" help="Policy type" ptype="SUBCOMMAND" mode="subcommand" optional="false" order="true">
        <PARAM name="fbs-policy-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
          <PARAM name="qos" help="QoS Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;1&quot; ) -o (&quot;1&quot;=&quot;2&quot; )"/>
          <PARAM name="monitoring" help="Monitoring Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;1&quot; )"/>
          <PARAM name="forwarding" help="Forwarding Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;1&quot; )"/>
          <PARAM name="copp" help="CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; )"/>
          <PARAM name="acl-copp" help="ACL CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;3&quot; )"/>
        </PARAM>
      </PARAM>
      <PARAM name="fbs-direction-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="in" help="Ingress direction" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="out" help="Egress direction" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;${fbs-policy-type}&quot;=&quot;qos&quot; ) -a (&quot;Ethernet&quot; != &quot;CtrlPlane&quot; )"/>
      </PARAM>
      <PARAM name="fbs-policy-name" help="Name of the policy (Max: 63 characters)" ptype="STRING_63"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs bind_policy ${fbs-policy-name} ${fbs-policy-type} ${fbs-direction-type} ${iface} ${vlan_name} ${po_name} Ethernet</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Applies ingress/egress service policy on given interface 
                    </DESCRIPTION>
        <EXAMPLE summary="Applies ingress/egress service policy">
                       sonic(conf-if-Vlan100)# service-policy type forwarding in policy_vrf
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no service-policy" help="Removes ingress or egress policy">
      <PARAM name="type" help="Policy type" ptype="SUBCOMMAND" mode="subcommand" optional="false" order="true">
        <PARAM name="fbs-policy-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
          <PARAM name="qos" help="QoS Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;1&quot; ) -o (&quot;1&quot;=&quot;2&quot; )"/>
          <PARAM name="monitoring" help="Monitoring Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;1&quot; )"/>
          <PARAM name="forwarding" help="Forwarding Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;1&quot; )"/>
          <PARAM name="copp" help="CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; )"/>
          <PARAM name="acl-copp" help="ACL CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;3&quot; )"/>
        </PARAM>
      </PARAM>
      <PARAM name="fbs-direction-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="in" help="Ingress direction" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="out" help="Egress direction" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;${fbs-policy-type}&quot;=&quot;qos&quot; ) -a (&quot;Ethernet&quot; != &quot;CtrlPlane&quot; )"/>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs unbind_policy ${fbs-policy-type} ${fbs-direction-type} ${iface} ${vlan_name} ${po_name} Ethernet</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Removes ingress/egress service policy on given interface 
                    </DESCRIPTION>
        <EXAMPLE summary="Unbinds ingress/egress service policy">
                       sonic(conf-if-Vlan100)# no service-policy type forwarding in
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
  </VIEW>
  <!--===================================================================================-->
  <!-- Policy binding CLIs for subinterface -->
  <!--===================================================================================-->
  <VIEW name="configure-subif-view">
    <COMMAND name="service-policy" help="Apply ingress or egress policy" data_and_render_cb="fbs_service_policy_render_interface">
      <PARAM name="type" help="Policy type" ptype="SUBCOMMAND" mode="subcommand" optional="false" order="true">
        <PARAM name="fbs-policy-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
          <PARAM name="qos" help="QoS Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;1&quot; ) -o (&quot;1&quot;=&quot;2&quot; )"/>
          <PARAM name="monitoring" help="Monitoring Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;1&quot; )"/>
          <PARAM name="forwarding" help="Forwarding Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;1&quot; )"/>
          <PARAM name="copp" help="CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; )"/>
          <PARAM name="acl-copp" help="ACL CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;3&quot; )"/>
        </PARAM>
      </PARAM>
      <PARAM name="fbs-direction-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="in" help="Ingress direction" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="out" help="Egress direction" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;${fbs-policy-type}&quot;=&quot;qos&quot; ) -a (&quot;Ethernet&quot; != &quot;CtrlPlane&quot; )"/>
      </PARAM>
      <PARAM name="fbs-policy-name" help="Name of the policy (Max: 63 characters)" ptype="STRING_63"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs bind_policy ${fbs-policy-name} ${fbs-policy-type} ${fbs-direction-type} ${iface} ${vlan_name} ${po_name} Ethernet</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Applies ingress/egress service policy on given interface 
                    </DESCRIPTION>
        <EXAMPLE summary="Applies ingress/egress service policy">
                       sonic(conf-if-Vlan100)# service-policy type forwarding in policy_vrf
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no service-policy" help="Removes ingress or egress policy">
      <PARAM name="type" help="Policy type" ptype="SUBCOMMAND" mode="subcommand" optional="false" order="true">
        <PARAM name="fbs-policy-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
          <PARAM name="qos" help="QoS Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;1&quot; ) -o (&quot;1&quot;=&quot;2&quot; )"/>
          <PARAM name="monitoring" help="Monitoring Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;1&quot; )"/>
          <PARAM name="forwarding" help="Forwarding Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;1&quot; )"/>
          <PARAM name="copp" help="CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; )"/>
          <PARAM name="acl-copp" help="ACL CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;3&quot; )"/>
        </PARAM>
      </PARAM>
      <PARAM name="fbs-direction-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="in" help="Ingress direction" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="out" help="Egress direction" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;${fbs-policy-type}&quot;=&quot;qos&quot; ) -a (&quot;Ethernet&quot; != &quot;CtrlPlane&quot; )"/>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs unbind_policy ${fbs-policy-type} ${fbs-direction-type} ${iface} ${vlan_name} ${po_name} Ethernet</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Removes ingress/egress service policy on given interface 
                    </DESCRIPTION>
        <EXAMPLE summary="Unbinds ingress/egress service policy">
                       sonic(conf-if-Vlan100)# no service-policy type forwarding in
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
  </VIEW>
  <!--===================================================================================-->
  <!-- Policy binding CLIs for PortChannel -->
  <!--===================================================================================-->
  <VIEW name="configure-lag-view">
    <COMMAND name="service-policy" help="Apply ingress or egress policy" data_and_render_cb="fbs_service_policy_render_interface">
      <PARAM name="type" help="Policy type" ptype="SUBCOMMAND" mode="subcommand" optional="false" order="true">
        <PARAM name="fbs-policy-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
          <PARAM name="qos" help="QoS Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;1&quot; ) -o (&quot;1&quot;=&quot;2&quot; )"/>
          <PARAM name="monitoring" help="Monitoring Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;1&quot; )"/>
          <PARAM name="forwarding" help="Forwarding Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;1&quot; )"/>
          <PARAM name="copp" help="CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; )"/>
          <PARAM name="acl-copp" help="ACL CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;3&quot; )"/>
        </PARAM>
      </PARAM>
      <PARAM name="fbs-direction-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="in" help="Ingress direction" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="out" help="Egress direction" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;${fbs-policy-type}&quot;=&quot;qos&quot; ) -a (&quot;PortChannel&quot; != &quot;CtrlPlane&quot; )"/>
      </PARAM>
      <PARAM name="fbs-policy-name" help="Name of the policy (Max: 63 characters)" ptype="STRING_63"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs bind_policy ${fbs-policy-name} ${fbs-policy-type} ${fbs-direction-type} ${iface} ${vlan_name} ${po_name} PortChannel</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Applies ingress/egress service policy on given interface 
                    </DESCRIPTION>
        <EXAMPLE summary="Applies ingress/egress service policy">
                       sonic(conf-if-Vlan100)# service-policy type forwarding in policy_vrf
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no service-policy" help="Removes ingress or egress policy">
      <PARAM name="type" help="Policy type" ptype="SUBCOMMAND" mode="subcommand" optional="false" order="true">
        <PARAM name="fbs-policy-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
          <PARAM name="qos" help="QoS Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;1&quot; ) -o (&quot;1&quot;=&quot;2&quot; )"/>
          <PARAM name="monitoring" help="Monitoring Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;1&quot; )"/>
          <PARAM name="forwarding" help="Forwarding Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;1&quot; )"/>
          <PARAM name="copp" help="CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; )"/>
          <PARAM name="acl-copp" help="ACL CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;3&quot; )"/>
        </PARAM>
      </PARAM>
      <PARAM name="fbs-direction-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="in" help="Ingress direction" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="out" help="Egress direction" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;${fbs-policy-type}&quot;=&quot;qos&quot; ) -a (&quot;PortChannel&quot; != &quot;CtrlPlane&quot; )"/>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs unbind_policy ${fbs-policy-type} ${fbs-direction-type} ${iface} ${vlan_name} ${po_name} PortChannel</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Removes ingress/egress service policy on given interface 
                    </DESCRIPTION>
        <EXAMPLE summary="Unbinds ingress/egress service policy">
                       sonic(conf-if-Vlan100)# no service-policy type forwarding in
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
  </VIEW>
  <!--===================================================================================-->
  <!-- Policy binding CLIs for VLANs -->
  <!--===================================================================================-->
  <VIEW name="configure-vlan-view">
    <COMMAND name="service-policy" help="Apply ingress or egress policy" data_and_render_cb="fbs_service_policy_render_interface">
      <PARAM name="type" help="Policy type" ptype="SUBCOMMAND" mode="subcommand" optional="false" order="true">
        <PARAM name="fbs-policy-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
          <PARAM name="qos" help="QoS Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;1&quot; ) -o (&quot;1&quot;=&quot;2&quot; )"/>
          <PARAM name="monitoring" help="Monitoring Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;1&quot; )"/>
          <PARAM name="forwarding" help="Forwarding Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;1&quot; )"/>
          <PARAM name="copp" help="CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; )"/>
          <PARAM name="acl-copp" help="ACL CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;3&quot; )"/>
        </PARAM>
      </PARAM>
      <PARAM name="fbs-direction-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="in" help="Ingress direction" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="out" help="Egress direction" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;${fbs-policy-type}&quot;=&quot;qos&quot; ) -a (&quot;Vlan&quot; != &quot;CtrlPlane&quot; )"/>
      </PARAM>
      <PARAM name="fbs-policy-name" help="Name of the policy (Max: 63 characters)" ptype="STRING_63"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs bind_policy ${fbs-policy-name} ${fbs-policy-type} ${fbs-direction-type} ${iface} ${vlan_name} ${po_name} Vlan</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Applies ingress/egress service policy on given interface 
                    </DESCRIPTION>
        <EXAMPLE summary="Applies ingress/egress service policy">
                       sonic(conf-if-Vlan100)# service-policy type forwarding in policy_vrf
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no service-policy" help="Removes ingress or egress policy">
      <PARAM name="type" help="Policy type" ptype="SUBCOMMAND" mode="subcommand" optional="false" order="true">
        <PARAM name="fbs-policy-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
          <PARAM name="qos" help="QoS Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;1&quot; ) -o (&quot;1&quot;=&quot;2&quot; )"/>
          <PARAM name="monitoring" help="Monitoring Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;1&quot; )"/>
          <PARAM name="forwarding" help="Forwarding Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;1&quot; )"/>
          <PARAM name="copp" help="CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; )"/>
          <PARAM name="acl-copp" help="ACL CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;1&quot;=&quot;0&quot; ) -o (&quot;1&quot;=&quot;3&quot; )"/>
        </PARAM>
      </PARAM>
      <PARAM name="fbs-direction-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="in" help="Ingress direction" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="out" help="Egress direction" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;${fbs-policy-type}&quot;=&quot;qos&quot; ) -a (&quot;Vlan&quot; != &quot;CtrlPlane&quot; )"/>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs unbind_policy ${fbs-policy-type} ${fbs-direction-type} ${iface} ${vlan_name} ${po_name} Vlan</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Removes ingress/egress service policy on given interface 
                    </DESCRIPTION>
        <EXAMPLE summary="Unbinds ingress/egress service policy">
                       sonic(conf-if-Vlan100)# no service-policy type forwarding in
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
  </VIEW>
  <!--===================================================================================-->
  <!-- Policy binding CLIs for CtrlPlane -->
  <!--===================================================================================-->
  <VIEW name="configure-line-vty-view">
    <COMMAND name="service-policy" help="Apply ingress or egress policy" data_and_render_cb="fbs_service_policy_render_ctrlplane">
      <PARAM name="type" help="Policy type" ptype="SUBCOMMAND" mode="subcommand" optional="false" order="true">
        <PARAM name="fbs-policy-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
          <PARAM name="qos" help="QoS Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;2&quot;=&quot;0&quot; ) -o (&quot;2&quot;=&quot;1&quot; ) -o (&quot;2&quot;=&quot;2&quot; )"/>
          <PARAM name="monitoring" help="Monitoring Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;2&quot;=&quot;0&quot; ) -o (&quot;2&quot;=&quot;1&quot; )"/>
          <PARAM name="forwarding" help="Forwarding Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;2&quot;=&quot;0&quot; ) -o (&quot;2&quot;=&quot;1&quot; )"/>
          <PARAM name="copp" help="CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;2&quot;=&quot;0&quot; )"/>
          <PARAM name="acl-copp" help="ACL CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;2&quot;=&quot;0&quot; ) -o (&quot;2&quot;=&quot;3&quot; )"/>
        </PARAM>
      </PARAM>
      <PARAM name="fbs-direction-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="in" help="Ingress direction" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="out" help="Egress direction" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;${fbs-policy-type}&quot;=&quot;qos&quot; ) -a (&quot;CtrlPlane&quot; != &quot;CtrlPlane&quot; )"/>
      </PARAM>
      <PARAM name="fbs-policy-name" help="Name of the policy (Max: 63 characters)" ptype="STRING_63"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs bind_policy ${fbs-policy-name} ${fbs-policy-type} ${fbs-direction-type} ${iface} ${vlan_name} ${po_name} CtrlPlane</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Applies ingress/egress service policy on given interface 
                    </DESCRIPTION>
        <EXAMPLE summary="Applies ingress/egress service policy">
                       sonic(conf-if-Vlan100)# service-policy type forwarding in policy_vrf
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no service-policy" help="Removes ingress or egress policy">
      <PARAM name="type" help="Policy type" ptype="SUBCOMMAND" mode="subcommand" optional="false" order="true">
        <PARAM name="fbs-policy-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
          <PARAM name="qos" help="QoS Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;2&quot;=&quot;0&quot; ) -o (&quot;2&quot;=&quot;1&quot; ) -o (&quot;2&quot;=&quot;2&quot; )"/>
          <PARAM name="monitoring" help="Monitoring Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;2&quot;=&quot;0&quot; ) -o (&quot;2&quot;=&quot;1&quot; )"/>
          <PARAM name="forwarding" help="Forwarding Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;2&quot;=&quot;0&quot; ) -o (&quot;2&quot;=&quot;1&quot; )"/>
          <PARAM name="copp" help="CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;2&quot;=&quot;0&quot; )"/>
          <PARAM name="acl-copp" help="ACL CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;2&quot;=&quot;0&quot; ) -o (&quot;2&quot;=&quot;3&quot; )"/>
        </PARAM>
      </PARAM>
      <PARAM name="fbs-direction-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="in" help="Ingress direction" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="out" help="Egress direction" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;${fbs-policy-type}&quot;=&quot;qos&quot; ) -a (&quot;CtrlPlane&quot; != &quot;CtrlPlane&quot; )"/>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs unbind_policy ${fbs-policy-type} ${fbs-direction-type} ${iface} ${vlan_name} ${po_name} CtrlPlane</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Removes ingress/egress service policy on given interface 
                    </DESCRIPTION>
        <EXAMPLE summary="Unbinds ingress/egress service policy">
                       sonic(conf-if-Vlan100)# no service-policy type forwarding in
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
  </VIEW>
  <!--===================================================================================-->
  <!-- IPv4 Next Hop Group View -->
  <!--===================================================================================-->
  <VIEW name="configure-pbf-ip-nh-grp-view" prompt="${SYSTEM_NAME}(config-pbf-ip-nh-group)# " depth="2">
    <NAMESPACE ref="hidden-view" help="false" completion="false"/>
    <NAMESPACE ref="enable-view" help="false" completion="false"/>
    <NAMESPACE ref="enable-view" help="true" prefix="do" completion="true"/>
    <COMMAND name="exit" help="Exit from current mode" lock="false">
            	  <ACTION builtin="clish_nested_up"/>
  </COMMAND>
    <COMMAND name="end" help="Exit to EXEC mode" view="enable-view"/>
    <COMMAND name="no" help="Negate a command or set its defaults"/>
    <COMMAND name="entry" help="Configured next-hop group member at specified index">
      <PARAM name="entry-index" help="Entry index" ptype="RANGE_1_65535">
        <PARAM name="next-hop" help="Next hop" ptype="SUBCOMMAND" mode="subcommand" order="true"/>
        <PARAM name="ip-address" help="IPv4 address Value" ptype="DOTTED_QUAD" order="true"/>
        <PARAM name="vrf" help="Next hop VRF" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true">
          <PARAM name="vrf-options" help="" ptype="SUBCOMMAND" mode="switch">
            <PARAM name="vrf-name" help="Next hop VRF name" ptype="VRF_NAME"/>
            <PARAM name="default" help="Default VRF" ptype="SUBCOMMAND" mode="subcommand"/>
          </PARAM>
        </PARAM>
        <PARAM name="next-hop-type" help="" ptype="SUBCOMMAND" mode="switch" optional="true" order="true">
          <PARAM name="recursive" help="Next hop must be recursively resolved via an underlay interface" ptype="SUBCOMMAND" mode="subcommand"/>
          <PARAM name="non-recursive" help="Next hop must be non-recursive resolved an underlay interface" ptype="SUBCOMMAND" mode="subcommand"/>
          <PARAM name="overlay" help="Next hop must be reachable via an overlay interface" ptype="SUBCOMMAND" mode="subcommand"/>
        </PARAM>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs create_next_hop_group_member ${fbs-nh-grp-name} ${__params}</ACTION>
    </COMMAND>
    <COMMAND name="no entry" help="Delete next-hop group member at specified index">
      <PARAM name="entry-index" help="Entry index" ptype="RANGE_1_65535"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs delete_next_hop_group_member ${fbs-nh-grp-name} ${__params}</ACTION>
    </COMMAND>
    <COMMAND name="description" help="Configures next hop group description">
      <PARAM name="description-value" help="String" ptype="DESCRIPTION"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs create_next_hop_group_description ${fbs-nh-grp-name} description ${description-value}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Configures PBF next-hop group description
                    </DESCRIPTION>
        <USAGE>
                       A string describing the next hop group of max 256 characters. Description should be in double quotes if it has spaces
                    </USAGE>
        <EXAMPLE summary="Add description to next hop group">
                       sonic(config-pbf-ipv6-nh-group)# description"example description"
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no description" help="Deletes next hop group description">
      <ACTION builtin="clish_pyobj">sonic_cli_fbs delete_next_hop_group_description ${fbs-nh-grp-name}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Deletes PBF next-hop group description
                    </DESCRIPTION>
        <USAGE>
                    </USAGE>
        <EXAMPLE summary="Delete description from next hop group">
                       sonic(config-policy-map)# no description
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="threshold" help="Configure threshold parameters">
      <PARAM name="threshold-options" help="" mode="switch" ptype="SUBCOMMAND">
        <PARAM name="type" help="Threshold type" mode="subcommand" ptype="SUBCOMMAND">
          <PARAM name="threshold-types" help="" ptype="SUBCOMMAND" mode="switch">
            <PARAM name="percentage" help="Threshold is percentage of reachable members" ptype="SUBCOMMAND" mode="subcommand"/>
            <PARAM name="count" help="Threshold is count of reachable members" ptype="SUBCOMMAND" mode="subcommand"/>
          </PARAM>
          <PARAM name="up" help="Threshold value above which the downstream interfaces will be brought up" mode="subcommand" ptype="SUBCOMMAND" optional="true" order="true">
            <PARAM name="threshold-up" help="Threshold up value" ptype="RANGE_1_128"/>
          </PARAM>
          <PARAM name="down" help="Threshold value below which the downstream interfaces will be shut down" mode="subcommand" ptype="SUBCOMMAND" optional="true" order="true">
            <PARAM name="threshold-down" help="Threshold down value" ptype="RANGE_0_127"/>
          </PARAM>
        </PARAM>
        <PARAM name="up" help="Threshold value equal to or above which the next-hop group will be considered forwardable" mode="subcommand" ptype="SUBCOMMAND">
          <PARAM name="threshold-up" help="Threshold up value" ptype="RANGE_1_128"/>
          <PARAM name="down" help="Threshold value equal to or below which the next-hop group will be not be considered forwardable" mode="subcommand" ptype="SUBCOMMAND" optional="true" order="true">
            <PARAM name="threshold-down" help="Threshold down value" ptype="RANGE_0_127"/>
          </PARAM>
        </PARAM>
        <PARAM name="down" help="Threshold value equal to or below which the next-hop group will be not be considered forwardable" mode="subcommand" ptype="SUBCOMMAND">
          <PARAM name="threshold-down" help="Threshold down value" ptype="RANGE_0_127"/>
        </PARAM>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_next_hop_group_threshold ${fbs-nh-grp-name} ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                          Configure the threshold parameters which can be used to mark a next-hop group as forwardable.
                      </DESCRIPTION>
        <USAGE>
                          The threshold up value must be higher than threshold down value. If threshold up is not configured then its assumed as threshold down value + 1.
                          If threshold down is not configured then its assumed as 0.
                      </USAGE>
        <EXAMPLE summary="Configure threshold parameters">
                          sonic(config-pbf-ipv6-nh-group)# threshold type percentage up 70 down 40
                          sonic(config-pbf-ip-nh-group)# threshold type count up 4 down 2
                          sonic(config-pbf-ip-nh-group)# threshold down 1
                      </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no threshold" help="Configure threshold parameters">
      <PARAM name="threshold-type-options" help="" ptype="SUBCOMMAND" mode="switch" optional="true" order="true">
        <PARAM name="up" help="Remove threshold up value" mode="subcommand" ptype="SUBCOMMAND"/>
        <PARAM name="down" help="Remove threshold down value" mode="subcommand" ptype="SUBCOMMAND"/>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs delete_next_hop_group_threshold ${fbs-nh-grp-name} ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                          Delete the threshold parameters which can be used to mark a next-hop group as forwardable.
                      </DESCRIPTION>
        <USAGE>
                          Deleting threshold type will delete both up and down values. If threshold up is deleted then its assumed as threshold down value + 1.
                          If threshold down is deleted then its assumed as 0.
                      </USAGE>
        <EXAMPLE summary="Delete threshold parameters">
                          sonic(config-pbf-ipv6-nh-group)# no threshold up
                          sonic(config-pbf-ip-nh-group)# no threshold down
                          sonic(config-pbf-ip-nh-group)# no threshold
                      </EXAMPLE>
      </DOCGEN>
    </COMMAND>
  </VIEW>
  <!--===================================================================================-->
  <!-- IPv6 Next Hop Group View -->
  <!--===================================================================================-->
  <VIEW name="configure-pbf-ipv6-nh-grp-view" prompt="${SYSTEM_NAME}(config-pbf-ipv6-nh-group)# " depth="2">
    <NAMESPACE ref="hidden-view" help="false" completion="false"/>
    <NAMESPACE ref="enable-view" help="false" completion="false"/>
    <NAMESPACE ref="enable-view" help="true" prefix="do" completion="true"/>
    <COMMAND name="exit" help="Exit from current mode" lock="false">
            	  <ACTION builtin="clish_nested_up"/>
  </COMMAND>
    <COMMAND name="end" help="Exit to EXEC mode" view="enable-view"/>
    <COMMAND name="no" help="Negate a command or set its defaults"/>
    <COMMAND name="entry" help="Configured next-hop group member at specified index">
      <PARAM name="entry-index" help="Entry index" ptype="RANGE_1_65535">
        <PARAM name="next-hop" help="Next hop" ptype="SUBCOMMAND" mode="subcommand" order="true"/>
        <PARAM name="ip-address" help="IPv6 address Value" ptype="IPV6_ADDR" order="true"/>
        <PARAM name="vrf" help="Next hop VRF" ptype="SUBCOMMAND" mode="subcommand" optional="true" order="true">
          <PARAM name="vrf-options" help="" ptype="SUBCOMMAND" mode="switch">
            <PARAM name="vrf-name" help="Next hop VRF name" ptype="VRF_NAME"/>
            <PARAM name="default" help="Default VRF" ptype="SUBCOMMAND" mode="subcommand"/>
          </PARAM>
        </PARAM>
        <PARAM name="next-hop-type" help="" ptype="SUBCOMMAND" mode="switch" optional="true" order="true">
          <PARAM name="recursive" help="Next hop must be recursively resolved via an underlay interface" ptype="SUBCOMMAND" mode="subcommand"/>
          <PARAM name="non-recursive" help="Next hop must be non-recursive resolved an underlay interface" ptype="SUBCOMMAND" mode="subcommand"/>
          <PARAM name="overlay" help="Next hop must be reachable via an overlay interface" ptype="SUBCOMMAND" mode="subcommand"/>
        </PARAM>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs create_next_hop_group_member ${fbs-nh-grp-name} ${__params}</ACTION>
    </COMMAND>
    <COMMAND name="no entry" help="Delete next-hop group member at specified index">
      <PARAM name="entry-index" help="Entry index" ptype="RANGE_1_65535"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs delete_next_hop_group_member ${fbs-nh-grp-name} ${__params}</ACTION>
    </COMMAND>
    <COMMAND name="description" help="Configures next hop group description">
      <PARAM name="description-value" help="String" ptype="DESCRIPTION"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs create_next_hop_group_description ${fbs-nh-grp-name} description ${description-value}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Configures PBF next-hop group description
                    </DESCRIPTION>
        <USAGE>
                       A string describing the next hop group of max 256 characters. Description should be in double quotes if it has spaces
                    </USAGE>
        <EXAMPLE summary="Add description to next hop group">
                       sonic(config-pbf-ipv6-nh-group)# description"example description"
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no description" help="Deletes next hop group description">
      <ACTION builtin="clish_pyobj">sonic_cli_fbs delete_next_hop_group_description ${fbs-nh-grp-name}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Deletes PBF next-hop group description
                    </DESCRIPTION>
        <USAGE>
                    </USAGE>
        <EXAMPLE summary="Delete description from next hop group">
                       sonic(config-policy-map)# no description
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="threshold" help="Configure threshold parameters">
      <PARAM name="threshold-options" help="" mode="switch" ptype="SUBCOMMAND">
        <PARAM name="type" help="Threshold type" mode="subcommand" ptype="SUBCOMMAND">
          <PARAM name="threshold-types" help="" ptype="SUBCOMMAND" mode="switch">
            <PARAM name="percentage" help="Threshold is percentage of reachable members" ptype="SUBCOMMAND" mode="subcommand"/>
            <PARAM name="count" help="Threshold is count of reachable members" ptype="SUBCOMMAND" mode="subcommand"/>
          </PARAM>
          <PARAM name="up" help="Threshold value above which the downstream interfaces will be brought up" mode="subcommand" ptype="SUBCOMMAND" optional="true" order="true">
            <PARAM name="threshold-up" help="Threshold up value" ptype="RANGE_1_128"/>
          </PARAM>
          <PARAM name="down" help="Threshold value below which the downstream interfaces will be shut down" mode="subcommand" ptype="SUBCOMMAND" optional="true" order="true">
            <PARAM name="threshold-down" help="Threshold down value" ptype="RANGE_0_127"/>
          </PARAM>
        </PARAM>
        <PARAM name="up" help="Threshold value equal to or above which the next-hop group will be considered forwardable" mode="subcommand" ptype="SUBCOMMAND">
          <PARAM name="threshold-up" help="Threshold up value" ptype="RANGE_1_128"/>
          <PARAM name="down" help="Threshold value equal to or below which the next-hop group will be not be considered forwardable" mode="subcommand" ptype="SUBCOMMAND" optional="true" order="true">
            <PARAM name="threshold-down" help="Threshold down value" ptype="RANGE_0_127"/>
          </PARAM>
        </PARAM>
        <PARAM name="down" help="Threshold value equal to or below which the next-hop group will be not be considered forwardable" mode="subcommand" ptype="SUBCOMMAND">
          <PARAM name="threshold-down" help="Threshold down value" ptype="RANGE_0_127"/>
        </PARAM>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs set_next_hop_group_threshold ${fbs-nh-grp-name} ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                          Configure the threshold parameters which can be used to mark a next-hop group as forwardable.
                      </DESCRIPTION>
        <USAGE>
                          The threshold up value must be higher than threshold down value. If threshold up is not configured then its assumed as threshold down value + 1.
                          If threshold down is not configured then its assumed as 0.
                      </USAGE>
        <EXAMPLE summary="Configure threshold parameters">
                          sonic(config-pbf-ipv6-nh-group)# threshold type percentage up 70 down 40
                          sonic(config-pbf-ip-nh-group)# threshold type count up 4 down 2
                          sonic(config-pbf-ip-nh-group)# threshold down 1
                      </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no threshold" help="Configure threshold parameters">
      <PARAM name="threshold-type-options" help="" ptype="SUBCOMMAND" mode="switch" optional="true" order="true">
        <PARAM name="up" help="Remove threshold up value" mode="subcommand" ptype="SUBCOMMAND"/>
        <PARAM name="down" help="Remove threshold down value" mode="subcommand" ptype="SUBCOMMAND"/>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs delete_next_hop_group_threshold ${fbs-nh-grp-name} ${__params}</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                          Delete the threshold parameters which can be used to mark a next-hop group as forwardable.
                      </DESCRIPTION>
        <USAGE>
                          Deleting threshold type will delete both up and down values. If threshold up is deleted then its assumed as threshold down value + 1.
                          If threshold down is deleted then its assumed as 0.
                      </USAGE>
        <EXAMPLE summary="Delete threshold parameters">
                          sonic(config-pbf-ipv6-nh-group)# no threshold up
                          sonic(config-pbf-ip-nh-group)# no threshold down
                          sonic(config-pbf-ip-nh-group)# no threshold
                      </EXAMPLE>
      </DOCGEN>
    </COMMAND>
  </VIEW>
  <!--===================================================================================-->
  <!-- Policy binding CLIs for CPU -->
  <!--===================================================================================-->
  <VIEW name="config-if-CPU-view">
    <COMMAND name="service-policy" help="Apply ingress or egress policy" data_and_render_cb="fbs_service_policy_render_cpu_port">
      <PARAM name="type" help="Policy type" ptype="SUBCOMMAND" mode="subcommand" optional="false" order="true">
        <PARAM name="fbs-policy-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
          <PARAM name="qos" help="QoS Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;3&quot;=&quot;0&quot; ) -o (&quot;3&quot;=&quot;1&quot; ) -o (&quot;3&quot;=&quot;2&quot; )"/>
          <PARAM name="monitoring" help="Monitoring Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;3&quot;=&quot;0&quot; ) -o (&quot;3&quot;=&quot;1&quot; )"/>
          <PARAM name="forwarding" help="Forwarding Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;3&quot;=&quot;0&quot; ) -o (&quot;3&quot;=&quot;1&quot; )"/>
          <PARAM name="copp" help="CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;3&quot;=&quot;0&quot; )"/>
          <PARAM name="acl-copp" help="ACL CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;3&quot;=&quot;0&quot; ) -o (&quot;3&quot;=&quot;3&quot; )"/>
        </PARAM>
      </PARAM>
      <PARAM name="fbs-direction-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="in" help="Ingress direction" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="out" help="Egress direction" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;${fbs-policy-type}&quot;=&quot;qos&quot; ) -a (&quot;CPU&quot; != &quot;CtrlPlane&quot; )"/>
      </PARAM>
      <PARAM name="fbs-policy-name" help="Name of the policy (Max: 63 characters)" ptype="STRING_63"/>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs bind_policy ${fbs-policy-name} ${fbs-policy-type} ${fbs-direction-type} ${iface} ${vlan_name} ${po_name} CPU</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Applies ingress/egress service policy on given interface 
                    </DESCRIPTION>
        <EXAMPLE summary="Applies ingress/egress service policy">
                       sonic(conf-if-Vlan100)# service-policy type forwarding in policy_vrf
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
    <COMMAND name="no service-policy" help="Removes ingress or egress policy">
      <PARAM name="type" help="Policy type" ptype="SUBCOMMAND" mode="subcommand" optional="false" order="true">
        <PARAM name="fbs-policy-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
          <PARAM name="qos" help="QoS Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;3&quot;=&quot;0&quot; ) -o (&quot;3&quot;=&quot;1&quot; ) -o (&quot;3&quot;=&quot;2&quot; )"/>
          <PARAM name="monitoring" help="Monitoring Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;3&quot;=&quot;0&quot; ) -o (&quot;3&quot;=&quot;1&quot; )"/>
          <PARAM name="forwarding" help="Forwarding Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;3&quot;=&quot;0&quot; ) -o (&quot;3&quot;=&quot;1&quot; )"/>
          <PARAM name="copp" help="CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;3&quot;=&quot;0&quot; )"/>
          <PARAM name="acl-copp" help="ACL CoPP Policy" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;3&quot;=&quot;0&quot; ) -o (&quot;3&quot;=&quot;3&quot; )"/>
        </PARAM>
      </PARAM>
      <PARAM name="fbs-direction-type" help="Policy type" ptype="SUBCOMMAND" mode="switch">
        <PARAM name="in" help="Ingress direction" ptype="SUBCOMMAND" mode="subcommand"/>
        <PARAM name="out" help="Egress direction" ptype="SUBCOMMAND" mode="subcommand" test="(&quot;${fbs-policy-type}&quot;=&quot;qos&quot; ) -a (&quot;CPU&quot; != &quot;CtrlPlane&quot; )"/>
      </PARAM>
      <ACTION builtin="clish_pyobj">sonic_cli_fbs unbind_policy ${fbs-policy-type} ${fbs-direction-type} ${iface} ${vlan_name} ${po_name} CPU</ACTION>
      <DOCGEN>
        <DESCRIPTION>
                       Removes ingress/egress service policy on given interface 
                    </DESCRIPTION>
        <EXAMPLE summary="Unbinds ingress/egress service policy">
                       sonic(conf-if-Vlan100)# no service-policy type forwarding in
                    </EXAMPLE>
      </DOCGEN>
    </COMMAND>
  </VIEW>
</CLISH_MODULE>
